------------------------------------------------------------------------------------------------------------------------
-- ALTPLL
--
-- Version 1.0
--
-- This module implements the PLL for the Stratix device family
--
--  Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions  
--  and other software and tools, and its AMPP partner logic  
--  functions, and any output files from any of the foregoing  
--  (including device programming or simulation files), and any  
--  associated documentation or information are expressly subject  
--  to the terms and conditions of the Altera Program License  
--  Subscription Agreement, Altera MegaCore Function License  
--  Agreement, or other applicable license agreement, including,  
--  without limitation, that your use is for the sole purpose of  
--  programming logic devices manufactured by Altera and sold by  
--  Altera or its authorized distributors.  Please refer to the  
--  applicable agreement for further details. 
--  
--  Quartus II 13.0.1 Build 232 06/12/2013 
--
------------------------------------------------------------------------------------------------------------------------

OPTIONS NAME_SUBSTITUTION = ON;
OPTIONS TREAT_DEFAULT_VALUE_AS_UNUSED = ON;

CONSTANT CLOCK0 = "CLK0";
CONSTANT CLOCK1 = "CLK1";
CONSTANT CLOCK2 = "CLK2";
CONSTANT CLOCK3 = "CLK3";
CONSTANT CLOCK4 = "CLK4";
CONSTANT CLOCK5 = "CLK5";
CONSTANT EXT_CLK3 = "EXTCLK3";
CONSTANT EXT_CLK2 = "EXTCLK2";
CONSTANT EXT_CLK1 = "EXTCLK1";
CONSTANT EXT_CLK0 = "EXTCLK0";
CONSTANT BYPASS_MODE = "BYPASS";
CONSTANT ODD_MODE = "ODD";
CONSTANT EVEN_MODE = "EVEN";
CONSTANT E0_COUNTER = "E0";
CONSTANT E1_COUNTER = "E1";
CONSTANT E2_COUNTER = "E2";
CONSTANT E3_COUNTER = "E3";
CONSTANT G0_COUNTER = "G0";
CONSTANT G1_COUNTER = "G1";
CONSTANT G2_COUNTER = "G2";
CONSTANT G3_COUNTER = "G3";
CONSTANT L0_COUNTER = "L0";
CONSTANT L1_COUNTER = "L1";
CONSTANT C0_COUNTER = "C0";
CONSTANT C1_COUNTER = "C1";
CONSTANT C2_COUNTER = "C2";
CONSTANT C3_COUNTER = "C3";
CONSTANT C4_COUNTER = "C4";
CONSTANT C5_COUNTER = "C5";
CONSTANT TYPE_AUTO = "AUTO";
CONSTANT TYPE_ENHANCED = "ENHANCED";
CONSTANT TYPE_FAST = "FAST";
CONSTANT TYPE_GPP = "GPP";
CONSTANT TYPE_EGPP = "EGPP";
CONSTANT SCAN_SHORT = "SHORT";
CONSTANT SCAN_LONG = "LONG";
CONSTANT BANDWIDTH_LOW = "LOW";
CONSTANT BANDWIDTH_HIGH = "HIGH";
CONSTANT BANDWIDTH_MEDIUM = "MEDIUM";
CONSTANT BANDWIDTH_AUTO = "AUTO";
CONSTANT BANDWIDTH_CUSTOM = "CUSTOM";
CONSTANT DEFAULT_USAGE = "PORT_CONNECTIVITY";
CONSTANT PORT_USED = "PORT_USED";
CONSTANT PORT_UNUSED = "PORT_UNUSED";
CONSTANT OFF_STRING = "OFF";
CONSTANT BITS_PARAMETER_DEFAULT = 9999;

PARAMETERS
(
	OPERATION_MODE,
	PLL_TYPE = TYPE_AUTO,
	LPM_HINT = "UNUSED",
	QUALIFY_CONF_DONE = "OFF",
	COMPENSATE_CLOCK = "CLK0",
	SCAN_CHAIN = SCAN_LONG,
	PRIMARY_CLOCK = "INCLK0",
	INCLK0_INPUT_FREQUENCY,
	INCLK1_INPUT_FREQUENCY = 0,
	GATE_LOCK_SIGNAL = "NO",
	GATE_LOCK_COUNTER = 0,
	LOCK_HIGH = 1,
	LOCK_LOW = 1,
	VALID_LOCK_MULTIPLIER = 1,
	INVALID_LOCK_MULTIPLIER = 5,
	SWITCH_OVER_ON_LOSSCLK = "OFF",
	SWITCH_OVER_ON_GATED_LOCK = "OFF",
	ENABLE_SWITCH_OVER_COUNTER = "OFF",
	SKIP_VCO = "OFF",
	SWITCH_OVER_COUNTER = 0,
	SWITCH_OVER_TYPE = "AUTO",
	FEEDBACK_SOURCE = EXT_CLK0,
	BANDWIDTH = 0,
	BANDWIDTH_TYPE = BANDWIDTH_AUTO,
	SPREAD_FREQUENCY = 0,
	DOWN_SPREAD = 0,
	SELF_RESET_ON_GATED_LOSS_LOCK = "OFF",
	SELF_RESET_ON_LOSS_LOCK = "OFF",
	-- Specifications for the internal clocks (i.e. they can feed into the core of the device)
	CLK9_MULTIPLY_BY = 0,
	CLK8_MULTIPLY_BY = 0,
	CLK7_MULTIPLY_BY = 0,
	CLK6_MULTIPLY_BY = 0,
	CLK5_MULTIPLY_BY = 1,
	CLK4_MULTIPLY_BY = 1,
	CLK3_MULTIPLY_BY = 1,
	CLK2_MULTIPLY_BY = 1,
	CLK1_MULTIPLY_BY = 1,
	CLK0_MULTIPLY_BY = 1,
	CLK9_DIVIDE_BY = 0,
	CLK8_DIVIDE_BY = 0,
	CLK7_DIVIDE_BY = 0,
	CLK6_DIVIDE_BY = 0,
	CLK5_DIVIDE_BY = 1,
	CLK4_DIVIDE_BY = 1,
	CLK3_DIVIDE_BY = 1,
	CLK2_DIVIDE_BY = 1,
	CLK1_DIVIDE_BY = 1,
	CLK0_DIVIDE_BY = 1,
	CLK9_PHASE_SHIFT = 0,
	CLK8_PHASE_SHIFT = 0,
	CLK7_PHASE_SHIFT = 0,
	CLK6_PHASE_SHIFT = 0,
	CLK5_PHASE_SHIFT = 0,
	CLK4_PHASE_SHIFT = 0,
	CLK3_PHASE_SHIFT = 0,
	CLK2_PHASE_SHIFT = 0,
	CLK1_PHASE_SHIFT = 0,
	CLK0_PHASE_SHIFT = 0,
	CLK5_TIME_DELAY = 0,
	CLK4_TIME_DELAY = 0,
	CLK3_TIME_DELAY = 0,
	CLK2_TIME_DELAY = 0,
	CLK1_TIME_DELAY = 0,
	CLK0_TIME_DELAY = 0,
	CLK9_DUTY_CYCLE = 50,
	CLK8_DUTY_CYCLE = 50,
	CLK7_DUTY_CYCLE = 50,
	CLK6_DUTY_CYCLE = 50,
	CLK5_DUTY_CYCLE = 50,
	CLK4_DUTY_CYCLE = 50,
	CLK3_DUTY_CYCLE = 50,
	CLK2_DUTY_CYCLE = 50,
	CLK1_DUTY_CYCLE = 50,
	CLK0_DUTY_CYCLE = 50,
	CLK9_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK8_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK7_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK6_USE_EVEN_COUNTER_MODE = OFF_STRING,	
	CLK5_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK4_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK3_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK2_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK1_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK0_USE_EVEN_COUNTER_MODE = OFF_STRING,
	CLK9_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK8_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK7_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK6_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK5_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK4_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK3_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK2_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK1_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	CLK0_USE_EVEN_COUNTER_VALUE = OFF_STRING,
	LOCK_WINDOW_UI = " 0.05",


	-- spr 237555 & 244205
	LOCK_WINDOW_UI_BITS = "UNUSED",
	VCO_RANGE_DETECTOR_LOW_BITS = "UNUSED",
	VCO_RANGE_DETECTOR_HIGH_BITS = "UNUSED",

	-- spr 254234
	DPA_MULTIPLY_BY = 0,
	DPA_DIVIDE_BY = 1,
	DPA_DIVIDER = 0,
	
	-- Specifications for the external clocks (i.e. these must feed dedicated pins)
	EXTCLK3_MULTIPLY_BY = 1,
	EXTCLK2_MULTIPLY_BY = 1,
	EXTCLK1_MULTIPLY_BY = 1,
	EXTCLK0_MULTIPLY_BY = 1,
	EXTCLK3_DIVIDE_BY = 1,
	EXTCLK2_DIVIDE_BY = 1,
	EXTCLK1_DIVIDE_BY = 1,
	EXTCLK0_DIVIDE_BY = 1,
	EXTCLK3_PHASE_SHIFT = 0,
	EXTCLK2_PHASE_SHIFT = 0,
	EXTCLK1_PHASE_SHIFT = 0,
	EXTCLK0_PHASE_SHIFT = 0,
	EXTCLK3_TIME_DELAY = 0,
	EXTCLK2_TIME_DELAY = 0,
	EXTCLK1_TIME_DELAY = 0,
	EXTCLK0_TIME_DELAY = 0,
	EXTCLK3_DUTY_CYCLE = 50,
	EXTCLK2_DUTY_CYCLE = 50,
	EXTCLK1_DUTY_CYCLE = 50,
	EXTCLK0_DUTY_CYCLE = 50,
	VCO_MULTIPLY_BY = 0,
	VCO_DIVIDE_BY = 0,
	SCLKOUT0_PHASE_SHIFT = 0,
	SCLKOUT1_PHASE_SHIFT = 0,
	-- Advanced Parameters
	VCO_MIN = 0,
	VCO_MAX = 0,
	VCO_CENTER = 0,
	PFD_MIN = 0,
	PFD_MAX = 0,
	M_INITIAL = 0,
	M = 0,
	N = 1,
	M2 = 1,
	N2 = 1,
	SS = 1,
	C0_HIGH = 0,
	C1_HIGH = 0,
	C2_HIGH = 0,
	C3_HIGH = 0,
	C4_HIGH = 0,
	C5_HIGH = 0,
	C6_HIGH = 0,
	C7_HIGH = 0,
	C8_HIGH = 0,
	C9_HIGH = 0,
	C0_LOW = 0,
	C1_LOW = 0,
	C2_LOW = 0,
	C3_LOW = 0,
	C4_LOW = 0,
	C5_LOW = 0,
	C6_LOW = 0,
	C7_LOW = 0,
	C8_LOW = 0,
	C9_LOW = 0,
	C0_INITIAL = 0,
	C1_INITIAL = 0,
	C2_INITIAL = 0,
	C3_INITIAL = 0,
	C4_INITIAL = 0,
	C5_INITIAL = 0,
	C6_INITIAL = 0,
	C7_INITIAL = 0,
	C8_INITIAL = 0,
	C9_INITIAL = 0,
	C0_MODE = BYPASS_MODE,
	C1_MODE = BYPASS_MODE,
	C2_MODE = BYPASS_MODE,
	C3_MODE = BYPASS_MODE,
	C4_MODE = BYPASS_MODE,
	C5_MODE = BYPASS_MODE,
	C6_MODE = BYPASS_MODE,
	C7_MODE = BYPASS_MODE,
	C8_MODE = BYPASS_MODE,
	C9_MODE = BYPASS_MODE,
	C0_PH = 0,
	C1_PH = 0,
	C2_PH = 0,
	C3_PH = 0,
	C4_PH = 0,
	C5_PH = 0,
	C6_PH = 0,
	C7_PH = 0,
	C8_PH = 0,
	C9_PH = 0,
	L0_HIGH = 1,
	L1_HIGH = 1,
	G0_HIGH = 1,
	G1_HIGH = 1,
	G2_HIGH = 1,
	G3_HIGH = 1,
	E0_HIGH = 1,
	E1_HIGH = 1,
	E2_HIGH = 1,
	E3_HIGH = 1,
	L0_LOW = 1,
	L1_LOW = 1,
	G0_LOW = 1,
	G1_LOW = 1,
	G2_LOW = 1,
	G3_LOW = 1,
	E0_LOW = 1,
	E1_LOW = 1,
	E2_LOW = 1,
	E3_LOW = 1,
	L0_INITIAL = 1,
	L1_INITIAL = 1,
	G0_INITIAL = 1,
	G1_INITIAL = 1,
	G2_INITIAL = 1,
	G3_INITIAL = 1,
	E0_INITIAL = 1,
	E1_INITIAL = 1,
	E2_INITIAL = 1,
	E3_INITIAL = 1,
	L0_MODE = BYPASS_MODE,
	L1_MODE = BYPASS_MODE,
	G0_MODE = BYPASS_MODE,
	G1_MODE = BYPASS_MODE,
	G2_MODE = BYPASS_MODE,
	G3_MODE = BYPASS_MODE,
	E0_MODE = BYPASS_MODE,
	E1_MODE = BYPASS_MODE,
	E2_MODE = BYPASS_MODE,
	E3_MODE = BYPASS_MODE,
	L0_PH = 0,
	L1_PH = 0,
	G0_PH = 0,
	G1_PH = 0,
	G2_PH = 0,
	G3_PH = 0,
	E0_PH = 0,
	E1_PH = 0,
	E2_PH = 0,
	E3_PH = 0,
	M_PH = 0,
	C1_USE_CASC_IN = OFF_STRING,
	C2_USE_CASC_IN = OFF_STRING,
	C3_USE_CASC_IN = OFF_STRING,
	C4_USE_CASC_IN = OFF_STRING,
	C5_USE_CASC_IN = OFF_STRING,
	C6_USE_CASC_IN = OFF_STRING,
	C7_USE_CASC_IN = OFF_STRING,
	C8_USE_CASC_IN = OFF_STRING,
	C9_USE_CASC_IN = OFF_STRING,
	CLK0_COUNTER = G0_COUNTER,
	CLK1_COUNTER = G0_COUNTER,
	CLK2_COUNTER = G0_COUNTER,
	CLK3_COUNTER = G0_COUNTER,
	CLK4_COUNTER = G0_COUNTER,
	CLK5_COUNTER = G0_COUNTER,
	CLK6_COUNTER = E0_COUNTER,
	CLK7_COUNTER = E1_COUNTER,
	CLK8_COUNTER = E2_COUNTER,
	CLK9_COUNTER = E3_COUNTER,
	L0_TIME_DELAY = 0,
	L1_TIME_DELAY = 0,
	G0_TIME_DELAY = 0,
	G1_TIME_DELAY = 0,
	G2_TIME_DELAY = 0,
	G3_TIME_DELAY = 0,
	E0_TIME_DELAY = 0,
	E1_TIME_DELAY = 0,
	E2_TIME_DELAY = 0,
	E3_TIME_DELAY = 0,
	M_TIME_DELAY = 0,
	N_TIME_DELAY = 0,
	EXTCLK3_COUNTER = E3_COUNTER,
	EXTCLK2_COUNTER = E2_COUNTER,
	EXTCLK1_COUNTER = E1_COUNTER,
	EXTCLK0_COUNTER = E0_COUNTER,
	ENABLE0_COUNTER = L0_COUNTER,
	ENABLE1_COUNTER = L0_COUNTER,
	CHARGE_PUMP_CURRENT = 2,
	LOOP_FILTER_R = " 1.000000",
	LOOP_FILTER_C = 5,
	CHARGE_PUMP_CURRENT_BITS = BITS_PARAMETER_DEFAULT,
	LOOP_FILTER_R_BITS = BITS_PARAMETER_DEFAULT,
	LOOP_FILTER_C_BITS = BITS_PARAMETER_DEFAULT,
	VCO_POST_SCALE = 0,
	CLK2_OUTPUT_FREQUENCY = 0,
	CLK1_OUTPUT_FREQUENCY = 0,
	CLK0_OUTPUT_FREQUENCY = 0,
	INTENDED_DEVICE_FAMILY = "NONE",
	PORT_CLKENA0 = DEFAULT_USAGE,
	PORT_CLKENA1 = DEFAULT_USAGE,
	PORT_CLKENA2 = DEFAULT_USAGE,
	PORT_CLKENA3 = DEFAULT_USAGE,
	PORT_CLKENA4 = DEFAULT_USAGE,
	PORT_CLKENA5 = DEFAULT_USAGE,
	PORT_EXTCLKENA0 = DEFAULT_USAGE,
	PORT_EXTCLKENA1 = DEFAULT_USAGE,
	PORT_EXTCLKENA2 = DEFAULT_USAGE,
	PORT_EXTCLKENA3 = DEFAULT_USAGE,
	PORT_EXTCLK0 = DEFAULT_USAGE,
	PORT_EXTCLK1 = DEFAULT_USAGE,
	PORT_EXTCLK2 = DEFAULT_USAGE,
	PORT_EXTCLK3 = DEFAULT_USAGE,
	PORT_CLKBAD0 = DEFAULT_USAGE,
	PORT_CLKBAD1 = DEFAULT_USAGE,
	PORT_CLK0 = DEFAULT_USAGE,
	PORT_CLK1 = DEFAULT_USAGE,
	PORT_CLK2 = DEFAULT_USAGE,
	PORT_CLK3 = DEFAULT_USAGE,
	PORT_CLK4 = DEFAULT_USAGE,
	PORT_CLK5 = DEFAULT_USAGE,
	PORT_CLK6 = PORT_UNUSED,
	PORT_CLK7 = PORT_UNUSED,
	PORT_CLK8 = PORT_UNUSED,
	PORT_CLK9 = PORT_UNUSED,
	PORT_SCANDATA = DEFAULT_USAGE,
	PORT_SCANDATAOUT = DEFAULT_USAGE,
	PORT_SCANDONE = DEFAULT_USAGE,
	PORT_SCLKOUT1 = DEFAULT_USAGE,
	PORT_SCLKOUT0 = DEFAULT_USAGE,
	PORT_ACTIVECLOCK = DEFAULT_USAGE,
	PORT_CLKLOSS = DEFAULT_USAGE,
	PORT_INCLK1 = DEFAULT_USAGE,
	PORT_INCLK0 = DEFAULT_USAGE,
	PORT_FBIN = DEFAULT_USAGE,
	PORT_PLLENA = DEFAULT_USAGE,
	PORT_CLKSWITCH = DEFAULT_USAGE,
	PORT_ARESET = DEFAULT_USAGE,
	PORT_PFDENA = DEFAULT_USAGE,
	PORT_SCANCLK = DEFAULT_USAGE,
	PORT_SCANACLR = DEFAULT_USAGE,
	PORT_SCANREAD = DEFAULT_USAGE,
	PORT_SCANWRITE = DEFAULT_USAGE,
	PORT_ENABLE0 = DEFAULT_USAGE,
	PORT_ENABLE1 = DEFAULT_USAGE,
	PORT_LOCKED = DEFAULT_USAGE,
	PORT_CONFIGUPDATE = DEFAULT_USAGE,
	PORT_FBOUT = DEFAULT_USAGE,
	PORT_PHASEDONE = DEFAULT_USAGE,
	PORT_PHASESTEP = DEFAULT_USAGE,
	PORT_PHASEUPDOWN = DEFAULT_USAGE,
	PORT_SCANCLKENA = DEFAULT_USAGE,
	PORT_PHASECOUNTERSELECT = DEFAULT_USAGE,
	PORT_VCOOVERRANGE = DEFAULT_USAGE,
	PORT_VCOUNDERRANGE = DEFAULT_USAGE,
	M_TEST_SOURCE = 5,
	C0_TEST_SOURCE = 5,
	C1_TEST_SOURCE = 5,
	C2_TEST_SOURCE = 5,
	C3_TEST_SOURCE = 5,
	C4_TEST_SOURCE = 5,
	C5_TEST_SOURCE = 5,
	C6_TEST_SOURCE = 5,
	C7_TEST_SOURCE = 5,
	C8_TEST_SOURCE = 5,
	C9_TEST_SOURCE = 5,
	CBXI_PARAMETER = "NOTHING",
	VCO_FREQUENCY_CONTROL = "AUTO",
	VCO_PHASE_SHIFT_STEP = 0,
	WIDTH_CLOCK = 6,
	WIDTH_PHASECOUNTERSELECT = 4,
	USING_FBMIMICBIDIR_PORT = "OFF",
	DEVICE_FAMILY,
	SCAN_CHAIN_MIF_FILE = "UNUSED",
	SIM_GATE_LOCK_DEVICE_BEHAVIOR = "OFF"
);

INCLUDE "aglobal130"; 			-- to get the device family information
INCLUDE "stratix_pll"; 		-- Stratix wysiwyg
INCLUDE "stratixii_pll";	-- Stratix II wysiwyg
INCLUDE "cycloneii_pll";	-- cycloneii wysiwyg

FUNCTION @CBXI_PARAMETER ( phasecounterselect[WIDTH_PHASECOUNTERSELECT-1..0], phaseupdown, phasestep, scandata, scanclk, scanclkena, configupdate, clkswitch, pfdena, areset, fbin, inclk[1..0]) WITH ( operation_mode, pll_type, compensate_clock, inclk1_input_frequency, inclk0_input_frequency, switch_over_type, bandwidth, bandwidth_type, vco_frequency_control, vco_multiply_by, vco_divide_by, vco_phase_shift_step, self_reset_on_loss_lock, clk0_multiply_by, clk0_divide_by, clk0_phase_shift, clk0_duty_cycle, clk0_use_even_counter_mode, clk0_use_even_counter_value, clk1_multiply_by, clk1_divide_by, clk1_phase_shift, clk1_duty_cycle, clk1_use_even_counter_mode, clk1_use_even_counter_value, clk2_multiply_by, clk2_divide_by, clk2_phase_shift, clk2_duty_cycle, clk2_use_even_counter_mode, clk2_use_even_counter_value, clk3_multiply_by, clk3_divide_by, clk3_phase_shift, clk3_duty_cycle, clk3_use_even_counter_mode, clk3_use_even_counter_value, clk4_multiply_by, clk4_divide_by, clk4_phase_shift, clk4_duty_cycle, clk4_use_even_counter_mode, clk4_use_even_counter_value, clk5_multiply_by, clk5_divide_by, clk5_phase_shift, clk5_duty_cycle, clk5_use_even_counter_mode, clk5_use_even_counter_value, clk6_multiply_by, clk6_divide_by, clk6_phase_shift, clk6_duty_cycle, clk6_use_even_counter_mode, clk6_use_even_counter_value, clk7_multiply_by, clk7_divide_by, clk7_phase_shift, clk7_duty_cycle, clk7_use_even_counter_mode, clk7_use_even_counter_value, clk8_multiply_by, clk8_divide_by, clk8_phase_shift, clk8_duty_cycle, clk8_use_even_counter_mode, clk8_use_even_counter_value, clk9_multiply_by, clk9_divide_by, clk9_phase_shift, clk9_duty_cycle, clk9_use_even_counter_mode, clk9_use_even_counter_value, m, initial, ph, n, vco_post_scale, charge_pump_current, loop_filter_r, loop_filter_c, lock_high, lock_low, lock_window_ui, c0_high, c0_low, c0_initial, c0_ph, c0_mode, c0_test_source, c1_high, c1_low, c1_initial, c1_ph, c1_mode, c1_use_casc_in, c1_test_source, c2_high, c2_low, c2_initial, c2_ph, c2_mode, c2_use_casc_in, c2_test_source, c3_high, c3_low, c3_initial, c3_ph, c3_mode, c3_use_casc_in, c3_test_source, c4_high, c4_low, c4_initial, c4_ph, c4_mode, c4_use_casc_in, c4_test_source, c5_high, c5_low, c5_initial, c5_ph, c5_mode, c5_use_casc_in, c5_test_source, c6_high, c6_low, c6_initial, c6_ph, c6_mode, c6_use_casc_in, c6_test_source, c7_high, c7_low, c7_initial, c7_ph, c7_mode, c7_use_casc_in, c7_test_source, c8_high, c8_low, c8_initial, c8_ph, c8_mode, c8_use_casc_in, c8_test_source, c9_high, c9_low, c9_initial, c9_ph, c9_mode, c9_use_casc_in, c9_test_source, clk0_counter, clk1_counter, clk2_counter, clk3_counter, clk4_counter, clk5_counter, clk6_counter, clk7_counter, clk8_counter, clk9_counter, vco_min, vco_max, vco_center, pfd_min, pfd_max, feedback_source, port_phasecounterselect, width_clock, width_phasecounterselect, using_fbmimicbidir, charge_pump_current_bits, loop_filter_r_bits, loop_filter_c_bits) RETURNS ( phasedone, scandataout, scandone, clkbad[1..0], activeclock, locked, vcooverrange, vcounderrange, fbout, clk[width_clock - 1..0], clkloss, fbmimicbidir, fref, icdrclk);
-- These are the values to pass down for the locking parameters
CONSTANT WYS_VALID_LOCK_MULTIPLIER = USED(VALID_LOCK_MULTIPLIER) ? 1 : "UNUSED";
CONSTANT WYS_INVALID_LOCK_MULTIPLIER = USED(INVALID_LOCK_MULTIPLIER) ? 5 : "UNUSED";

DEFINE CYCLONEII_MEMBER() = FAMILY_CYCLONEII_MEMBER(INTENDED_DEVICE_FAMILY) == 1;
DEFINE STRATIX_MEMBER() = (FAMILY_STRATIX_MEMBER(INTENDED_DEVICE_FAMILY) == 1) # (INTENDED_DEVICE_FAMILY == "NONE");
DEFINE STRATIXII_MEMBER() = FAMILY_STRATIXII_MEMBER(INTENDED_DEVICE_FAMILY) == 1;
DEFINE FAMILY_HAS_SCAN_PORTS() = STRATIX_MEMBER() # STRATIXII_MEMBER();
DEFINE INVERT_LOCKED_OUTPUT() = !STRATIXII_MEMBER() & !CYCLONEII_MEMBER() & (PLL_TYPE == TYPE_FAST);
DEFINE FAST_TYPE() = (PLL_TYPE == TYPE_FAST);
DEFINE NORMAL_MODE() = (OPERATION_MODE == "NORMAL");
DEFINE ZERO_DELAY_BUFFER_MODE() = (OPERATION_MODE == "ZERO_DELAY_BUFFER");
DEFINE EXTERNAL_FEEDBACK_MODE() = (OPERATION_MODE == "EXTERNAL_FEEDBACK");
DEFINE NO_COMPENSATION_MODE() = (OPERATION_MODE == "NO_COMPENSATION");
DEFINE USING_ADVANCED_PARAMETERS() = (M != 0);
DEFINE USING_USER_PARAMETERS() = (M == 0);
DEFINE SET_COMPENSATE_CLOCK() = ZERO_DELAY_BUFFER_MODE() # NORMAL_MODE();
DEFINE SCLKOUT0_SUPPORTED() = FAMILY_STRATIXII_MEMBER(INTENDED_DEVICE_FAMILY) == 1;
DEFINE SCLKOUT1_SUPPORTED() = FAMILY_STRATIXII_MEMBER(INTENDED_DEVICE_FAMILY) == 1;
DEFINE USING_INCLK1() = (USED(inclk1) & (PORT_INCLK1 == DEFAULT_USAGE)) # (PORT_INCLK1 == PORT_USED);
DEFINE USING_INCLK0() = (USED(inclk0) & (PORT_INCLK0 == DEFAULT_USAGE)) # (PORT_INCLK0 == PORT_USED);
DEFINE USING_SCANCLK() = (USED(scanclk) & (PORT_SCANCLK == DEFAULT_USAGE)) # (PORT_SCANCLK == PORT_USED);
DEFINE USING_LOCKED() = (USED(locked) & (PORT_LOCKED == DEFAULT_USAGE)) # (PORT_LOCKED == PORT_USED);
DEFINE USE_CLEARBOX() = ((FAMILY_USES_STRATIXIII_PLL_MEMBER(INTENDED_DEVICE_FAMILY) == 1) # (FAMILY_USES_STRATIXIII_PLL_MEMBER(DEVICE_FAMILY) == 1)) & (CBXI_PARAMETER != "NOTHING");
DEFINE USING_FBMIMICBIDIR() = (USED(fbmimicbidir) & (USING_FBMIMICBIDIR_PORT == "ON") & (FAMILY_STRATIXIII_MEMBER(DEVICE_FAMILY) == 1) & ZERO_DELAY_BUFFER_MODE());
DEFINE USING_PHASECOUNTERSELECT() = (USED(phasecounterselect) & (PORT_PHASECOUNTERSELECT == DEFAULT_USAGE)) # (PORT_PHASECOUNTERSELECT == PORT_USED);
-- DEFINE USING_CLK5() = (WIDTH_CLOCK > 5) & (USED(clk5) & PORT_CLK5 == DEFAULT_USAGE) # (PORT_CLK5 == PORT_USED);
DEFINE USING_CLK9() = (PORT_CLK9 == PORT_USED);
DEFINE USING_CLK8() = (PORT_CLK8 == PORT_USED);
DEFINE USING_CLK7() = (PORT_CLK7 == PORT_USED);
DEFINE USING_CLK6() = (PORT_CLK6 == PORT_USED);
DEFINE USING_CLK5() = (PORT_CLK5 == PORT_USED);
DEFINE USING_CLK4() = (USED(clk4) & PORT_CLK4 == DEFAULT_USAGE) # (PORT_CLK4 == PORT_USED);
DEFINE USING_CLK3() = (USED(clk3) & PORT_CLK3 == DEFAULT_USAGE) # (PORT_CLK3 == PORT_USED);
DEFINE USING_CLK2() = (USED(clk2) & PORT_CLK2 == DEFAULT_USAGE) # (PORT_CLK2 == PORT_USED);
DEFINE USING_CLK1() = (USED(clk1) & PORT_CLK1 == DEFAULT_USAGE) # (PORT_CLK1 == PORT_USED);
DEFINE USING_CLK0() = (USED(clk0) & PORT_CLK0 == DEFAULT_USAGE) # (PORT_CLK0 == PORT_USED);
DEFINE USING_CLK_OUTPUT() = USING_CLK9() # USING_CLK8() # USING_CLK7() # USING_CLK6() # USING_CLK5() # USING_CLK4() # USING_CLK3() # USING_CLK2() # USING_CLK1() # USING_CLK0();

SUBDESIGN altpll
(
	inclk[1..0] 										: INPUT = GND;
	fbin												: INPUT = VCC;
	pllena												: INPUT = VCC;
	clkswitch											: INPUT = GND;
	areset												: INPUT = GND;
	pfdena												: INPUT = VCC;
	clkena[5..0]										: INPUT = VCC;
	extclkena[3..0]										: INPUT = VCC;
	scanclk												: INPUT = GND;
	scanclkena											: INPUT = VCC;
	scanaclr											: INPUT = GND;
	scanread											: INPUT = GND;
	scanwrite											: INPUT = GND;
	scandata											: INPUT = GND;
	phasecounterselect[WIDTH_PHASECOUNTERSELECT - 1..0]	: INPUT = VCC;
	phaseupdown											: INPUT = VCC;
	phasestep											: INPUT = VCC;
	configupdate										: INPUT = GND;
	fbmimicbidir										: BIDIR = VCC;

	clk[WIDTH_CLOCK - 1..0]								: OUTPUT;
	extclk[3..0]										: OUTPUT;
	clkbad[1..0]										: OUTPUT;
	enable1												: OUTPUT;
	enable0												: OUTPUT;
	activeclock											: OUTPUT;
	clkloss												: OUTPUT;
	locked												: OUTPUT;
	scandataout											: OUTPUT;
	scandone											: OUTPUT;
	sclkout0											: OUTPUT;
	sclkout1											: OUTPUT;
	phasedone											: OUTPUT;
	vcooverrange										: OUTPUT;
	vcounderrange										: OUTPUT;
	fbout												: OUTPUT;
	fref												: OUTPUT;
	icdrclk												: OUTPUT;
)
VARIABLE
	IF !USE_CLEARBOX() GENERATE
	IF CYCLONEII_MEMBER() GENERATE
		pll : cycloneii_pll WITH(
									SELF_RESET_ON_GATED_LOSS_LOCK = USED(SELF_RESET_ON_GATED_LOSS_LOCK) ? SELF_RESET_ON_GATED_LOSS_LOCK : "UNUSED",
									OPERATION_MODE = USED(OPERATION_MODE) ? OPERATION_MODE : "UNUSED",
									COMPENSATE_CLOCK = USED(COMPENSATE_CLOCK) ? COMPENSATE_CLOCK : "UNUSED",
									VCO_POST_SCALE = USED(VCO_POST_SCALE) ? VCO_POST_SCALE : "UNUSED",
									CLK2_MULTIPLY_BY = USED(CLK2_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK2_MULTIPLY_BY : "UNUSED",
									CLK1_MULTIPLY_BY = USED(CLK1_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK1_MULTIPLY_BY : "UNUSED",
									CLK0_MULTIPLY_BY = USED(CLK0_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK0_MULTIPLY_BY : "UNUSED",
									CLK2_DIVIDE_BY = USED(CLK2_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK2_DIVIDE_BY : "UNUSED",
									CLK1_DIVIDE_BY = USED(CLK1_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK1_DIVIDE_BY : "UNUSED",
									CLK0_DIVIDE_BY = USED(CLK0_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK0_DIVIDE_BY : "UNUSED",
									CLK2_PHASE_SHIFT = USED(CLK2_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK2_PHASE_SHIFT : "UNUSED",
									CLK1_PHASE_SHIFT = USED(CLK1_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK1_PHASE_SHIFT : "UNUSED",
									CLK0_PHASE_SHIFT = USED(CLK0_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK0_PHASE_SHIFT : "UNUSED",
									CLK2_DUTY_CYCLE = USED(CLK2_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK2_DUTY_CYCLE : "UNUSED",
									CLK1_DUTY_CYCLE = USED(CLK1_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK1_DUTY_CYCLE : "UNUSED",
									CLK0_DUTY_CYCLE = USED(CLK0_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK0_DUTY_CYCLE : "UNUSED",
									CLK2_OUTPUT_FREQUENCY = CLK2_OUTPUT_FREQUENCY != 0 ? CLK2_OUTPUT_FREQUENCY : "UNUSED",
									CLK1_OUTPUT_FREQUENCY = CLK1_OUTPUT_FREQUENCY != 0 ? CLK1_OUTPUT_FREQUENCY : "UNUSED",
									CLK0_OUTPUT_FREQUENCY = CLK0_OUTPUT_FREQUENCY != 0 ? CLK0_OUTPUT_FREQUENCY : "UNUSED",
									INCLK0_INPUT_FREQUENCY = USED(INCLK0_INPUT_FREQUENCY) ? INCLK0_INPUT_FREQUENCY : "UNUSED",
									INCLK1_INPUT_FREQUENCY = USED(INCLK1_INPUT_FREQUENCY) ? INCLK1_INPUT_FREQUENCY : "UNUSED",
									GATE_LOCK_SIGNAL = USED(GATE_LOCK_SIGNAL) ? GATE_LOCK_SIGNAL : "UNUSED",
									GATE_LOCK_COUNTER = USED(GATE_LOCK_COUNTER) ? GATE_LOCK_COUNTER : "UNUSED",
									LOCK_HIGH = USED(LOCK_HIGH) ? LOCK_HIGH : "UNUSED",
									LOCK_LOW = USED(LOCK_LOW) ? LOCK_LOW : "UNUSED",
									BANDWIDTH = (BANDWIDTH_TYPE == "CUSTOM") & USED(BANDWIDTH) ? BANDWIDTH : "UNUSED",
									BANDWIDTH_TYPE = USED(BANDWIDTH_TYPE) ? BANDWIDTH_TYPE : "UNUSED",
									VCO_MIN = USED(VCO_MIN) ? VCO_MIN : "UNUSED",
									VCO_MAX = USED(VCO_MAX) ? VCO_MAX : "UNUSED",
									VCO_CENTER = USED(VCO_CENTER) ? VCO_CENTER : "UNUSED",
									PFD_MIN = USED(PFD_MIN) ? PFD_MIN : "UNUSED",
									PFD_MAX = USED(PFD_MAX) ? PFD_MAX : "UNUSED",
									M = USED(M) & USING_ADVANCED_PARAMETERS() ? M : "UNUSED",
									M_INITIAL = USED(M_INITIAL) & USING_ADVANCED_PARAMETERS() ? M_INITIAL : "UNUSED", 
									N = USED(N) & USING_ADVANCED_PARAMETERS() ? N : "UNUSED",
									C0_HIGH = USED(C0_HIGH) & USING_ADVANCED_PARAMETERS() ? C0_HIGH : "UNUSED",
									C1_HIGH = USED(C1_HIGH) & USING_ADVANCED_PARAMETERS() ? C1_HIGH : "UNUSED",
									C2_HIGH = USED(C2_HIGH) & USING_ADVANCED_PARAMETERS() ? C2_HIGH : "UNUSED",
									C0_LOW = USED(C0_LOW) & USING_ADVANCED_PARAMETERS() ? C0_LOW : "UNUSED",
									C1_LOW = USED(C1_LOW) & USING_ADVANCED_PARAMETERS() ? C1_LOW : "UNUSED",
									C2_LOW = USED(C2_LOW) & USING_ADVANCED_PARAMETERS() ? C2_LOW : "UNUSED",
									C0_INITIAL = USED(C0_INITIAL) & USING_ADVANCED_PARAMETERS() ? C0_INITIAL : "UNUSED",
									C1_INITIAL = USED(C1_INITIAL) & USING_ADVANCED_PARAMETERS() ? C1_INITIAL : "UNUSED",
									C2_INITIAL = USED(C2_INITIAL) & USING_ADVANCED_PARAMETERS() ? C2_INITIAL : "UNUSED",
									C0_MODE = USED(C0_MODE) & USING_ADVANCED_PARAMETERS() ? C0_MODE : "UNUSED",
									C1_MODE = USED(C1_MODE) & USING_ADVANCED_PARAMETERS() ? C1_MODE : "UNUSED",
									C2_MODE = USED(C2_MODE) & USING_ADVANCED_PARAMETERS() ? C2_MODE : "UNUSED", 
									C0_PH = USED(C0_PH) & USING_ADVANCED_PARAMETERS() ? C0_PH : "UNUSED",
									C1_PH = USED(C1_PH) & USING_ADVANCED_PARAMETERS() ? C1_PH : "UNUSED",
									C2_PH = USED(C2_PH) & USING_ADVANCED_PARAMETERS() ? C2_PH : "UNUSED",
									M_PH = USED(M_PH) & USING_ADVANCED_PARAMETERS() ? M_PH : "UNUSED",
									CLK2_COUNTER = USED(CLK2_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK2_COUNTER : "UNUSED",
									CLK1_COUNTER = USED(CLK1_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK1_COUNTER : "UNUSED",
									CLK0_COUNTER = USED(CLK0_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK0_COUNTER : "UNUSED",
									CHARGE_PUMP_CURRENT = USED(CHARGE_PUMP_CURRENT) & USING_ADVANCED_PARAMETERS() ? CHARGE_PUMP_CURRENT : "UNUSED",
									LOOP_FILTER_R = USED(LOOP_FILTER_R) & USING_ADVANCED_PARAMETERS() ? LOOP_FILTER_R : "UNUSED",
									LOOP_FILTER_C = USED(LOOP_FILTER_C) & USING_ADVANCED_PARAMETERS() ? LOOP_FILTER_C : "UNUSED", 
									VCO_MULTIPLY_BY = USED(VCO_MULTIPLY_BY) ? VCO_MULTIPLY_BY : "UNUSED",
									VCO_DIVIDE_BY = USED(VCO_DIVIDE_BY) ? VCO_DIVIDE_BY : "UNUSED",
									M_TEST_SOURCE = USED(M_TEST_SOURCE) ? M_TEST_SOURCE : "UNUSED",
									C0_TEST_SOURCE = USED(C0_TEST_SOURCE) ? C0_TEST_SOURCE : "UNUSED",
									C1_TEST_SOURCE = USED(C1_TEST_SOURCE) ? C1_TEST_SOURCE : "UNUSED",
									C2_TEST_SOURCE = USED(C2_TEST_SOURCE) ? C2_TEST_SOURCE : "UNUSED",
									SIM_GATE_LOCK_DEVICE_BEHAVIOR = USED(SIM_GATE_LOCK_DEVICE_BEHAVIOR)? SIM_GATE_LOCK_DEVICE_BEHAVIOR : "UNUSED"
		);
	ELSE GENERATE
	IF !STRATIXII_MEMBER() GENERATE
		pll : stratix_pll WITH	(
									OPERATION_MODE = OPERATION_MODE,
									COMPENSATE_CLOCK = USED(COMPENSATE_CLOCK) ? COMPENSATE_CLOCK : "UNUSED",
									QUALIFY_CONF_DONE = QUALIFY_CONF_DONE,
									PLL_TYPE = PLL_TYPE,
									SCAN_CHAIN = USED(SCAN_CHAIN) ? SCAN_CHAIN : "UNUSED",
									SKIP_VCO = USED(SKIP_VCO) ? SKIP_VCO : "UNUSED",
									CLK5_MULTIPLY_BY = USED(CLK5_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK5_MULTIPLY_BY : "UNUSED",
									CLK4_MULTIPLY_BY = USED(CLK4_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK4_MULTIPLY_BY : "UNUSED",
									CLK3_MULTIPLY_BY = USED(CLK3_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK3_MULTIPLY_BY : "UNUSED",
									CLK2_MULTIPLY_BY = USED(CLK2_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK2_MULTIPLY_BY : "UNUSED",
									CLK1_MULTIPLY_BY = USED(CLK1_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK1_MULTIPLY_BY : "UNUSED",
									CLK0_MULTIPLY_BY = USED(CLK0_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK0_MULTIPLY_BY : "UNUSED",
									CLK5_DIVIDE_BY = USED(CLK5_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK5_DIVIDE_BY : "UNUSED",
									CLK4_DIVIDE_BY = USED(CLK4_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK4_DIVIDE_BY : "UNUSED",
									CLK3_DIVIDE_BY = USED(CLK3_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK3_DIVIDE_BY : "UNUSED",
									CLK2_DIVIDE_BY = USED(CLK2_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK2_DIVIDE_BY : "UNUSED",
									CLK1_DIVIDE_BY = USED(CLK1_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK1_DIVIDE_BY : "UNUSED",
									CLK0_DIVIDE_BY = USED(CLK0_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK0_DIVIDE_BY : "UNUSED",
									CLK5_PHASE_SHIFT = USED(CLK5_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK5_PHASE_SHIFT : "UNUSED",
									CLK4_PHASE_SHIFT = USED(CLK4_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK4_PHASE_SHIFT : "UNUSED",
									CLK3_PHASE_SHIFT = USED(CLK3_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK3_PHASE_SHIFT : "UNUSED",
									CLK2_PHASE_SHIFT = USED(CLK2_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK2_PHASE_SHIFT : "UNUSED",
									CLK1_PHASE_SHIFT = USED(CLK1_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK1_PHASE_SHIFT : "UNUSED",
									CLK0_PHASE_SHIFT = USED(CLK0_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK0_PHASE_SHIFT : "UNUSED",
									CLK5_TIME_DELAY = USED(CLK5_TIME_DELAY) & USING_USER_PARAMETERS() ? CLK5_TIME_DELAY : "UNUSED",
									CLK4_TIME_DELAY = USED(CLK4_TIME_DELAY) & USING_USER_PARAMETERS() ? CLK4_TIME_DELAY : "UNUSED",
									CLK3_TIME_DELAY = USED(CLK3_TIME_DELAY) & USING_USER_PARAMETERS() ? CLK3_TIME_DELAY : "UNUSED",
									CLK2_TIME_DELAY = USED(CLK2_TIME_DELAY) & USING_USER_PARAMETERS() ? CLK2_TIME_DELAY : "UNUSED",
									CLK1_TIME_DELAY = USED(CLK1_TIME_DELAY) & USING_USER_PARAMETERS() ? CLK1_TIME_DELAY : "UNUSED",
									CLK0_TIME_DELAY = USED(CLK0_TIME_DELAY) & USING_USER_PARAMETERS() ? CLK0_TIME_DELAY : "UNUSED",
									CLK5_DUTY_CYCLE = USED(CLK5_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK5_DUTY_CYCLE : "UNUSED",
									CLK4_DUTY_CYCLE = USED(CLK4_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK4_DUTY_CYCLE : "UNUSED",
									CLK3_DUTY_CYCLE = USED(CLK3_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK3_DUTY_CYCLE : "UNUSED",
									CLK2_DUTY_CYCLE = USED(CLK2_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK2_DUTY_CYCLE : "UNUSED",
									CLK1_DUTY_CYCLE = USED(CLK1_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK1_DUTY_CYCLE : "UNUSED",
									CLK0_DUTY_CYCLE = USED(CLK0_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK0_DUTY_CYCLE : "UNUSED",
									EXTCLK3_MULTIPLY_BY = USED(EXTCLK3_MULTIPLY_BY) & USING_USER_PARAMETERS() ? EXTCLK3_MULTIPLY_BY : "UNUSED",
									EXTCLK2_MULTIPLY_BY = USED(EXTCLK2_MULTIPLY_BY) & USING_USER_PARAMETERS() ? EXTCLK2_MULTIPLY_BY : "UNUSED",
									EXTCLK1_MULTIPLY_BY = USED(EXTCLK1_MULTIPLY_BY) & USING_USER_PARAMETERS() ? EXTCLK1_MULTIPLY_BY : "UNUSED",
									EXTCLK0_MULTIPLY_BY = USED(EXTCLK0_MULTIPLY_BY) & USING_USER_PARAMETERS() ? EXTCLK0_MULTIPLY_BY : "UNUSED",
									EXTCLK3_DIVIDE_BY = USED(EXTCLK3_DIVIDE_BY) & USING_USER_PARAMETERS() ? EXTCLK3_DIVIDE_BY : "UNUSED",
									EXTCLK2_DIVIDE_BY = USED(EXTCLK2_DIVIDE_BY) & USING_USER_PARAMETERS() ? EXTCLK2_DIVIDE_BY : "UNUSED",
									EXTCLK1_DIVIDE_BY = USED(EXTCLK1_DIVIDE_BY) & USING_USER_PARAMETERS() ? EXTCLK1_DIVIDE_BY : "UNUSED",
									EXTCLK0_DIVIDE_BY = USED(EXTCLK0_DIVIDE_BY) & USING_USER_PARAMETERS() ? EXTCLK0_DIVIDE_BY : "UNUSED",
									EXTCLK3_PHASE_SHIFT = USED(EXTCLK3_PHASE_SHIFT) & USING_USER_PARAMETERS() ? EXTCLK3_PHASE_SHIFT : "UNUSED",
									EXTCLK2_PHASE_SHIFT = USED(EXTCLK2_PHASE_SHIFT) & USING_USER_PARAMETERS() ? EXTCLK2_PHASE_SHIFT : "UNUSED",
									EXTCLK1_PHASE_SHIFT = USED(EXTCLK1_PHASE_SHIFT) & USING_USER_PARAMETERS() ? EXTCLK1_PHASE_SHIFT : "UNUSED",
									EXTCLK0_PHASE_SHIFT = USED(EXTCLK0_PHASE_SHIFT) & USING_USER_PARAMETERS() ? EXTCLK0_PHASE_SHIFT : "UNUSED",
									EXTCLK3_TIME_DELAY = USED(EXTCLK3_TIME_DELAY) & USING_USER_PARAMETERS() ? EXTCLK3_TIME_DELAY : "UNUSED",
									EXTCLK2_TIME_DELAY = USED(EXTCLK2_TIME_DELAY) & USING_USER_PARAMETERS() ? EXTCLK2_TIME_DELAY : "UNUSED",
									EXTCLK1_TIME_DELAY = USED(EXTCLK1_TIME_DELAY) & USING_USER_PARAMETERS() ? EXTCLK1_TIME_DELAY : "UNUSED",
									EXTCLK0_TIME_DELAY = USED(EXTCLK0_TIME_DELAY) & USING_USER_PARAMETERS() ? EXTCLK0_TIME_DELAY : "UNUSED",
									EXTCLK3_DUTY_CYCLE = USED(EXTCLK3_DUTY_CYCLE) & USING_USER_PARAMETERS() ? EXTCLK3_DUTY_CYCLE : "UNUSED",
									EXTCLK2_DUTY_CYCLE = USED(EXTCLK2_DUTY_CYCLE) & USING_USER_PARAMETERS() ? EXTCLK2_DUTY_CYCLE : "UNUSED",
									EXTCLK1_DUTY_CYCLE = USED(EXTCLK1_DUTY_CYCLE) & USING_USER_PARAMETERS() ? EXTCLK1_DUTY_CYCLE : "UNUSED",
									EXTCLK0_DUTY_CYCLE = USED(EXTCLK0_DUTY_CYCLE) & USING_USER_PARAMETERS() ? EXTCLK0_DUTY_CYCLE : "UNUSED",
									PRIMARY_CLOCK = (((PRIMARY_CLOCK == "INCLK0") & USING_INCLK0()) #
													((PRIMARY_CLOCK == "INCLK1") & USING_INCLK1())) ? PRIMARY_CLOCK : "UNUSED",
									INCLK0_INPUT_FREQUENCY = USED(INCLK0_INPUT_FREQUENCY) ? INCLK0_INPUT_FREQUENCY : "UNUSED",
									INCLK1_INPUT_FREQUENCY = USED(INCLK1_INPUT_FREQUENCY) ? INCLK1_INPUT_FREQUENCY : "UNUSED",
									GATE_LOCK_COUNTER = USED(GATE_LOCK_COUNTER) ? GATE_LOCK_COUNTER : "UNUSED",
									LOCK_HIGH = USED(LOCK_HIGH) ? LOCK_HIGH : "UNUSED",
									LOCK_LOW = USED(LOCK_LOW) ? LOCK_LOW : "UNUSED",
									VALID_LOCK_MULTIPLIER = USING_LOCKED() ? WYS_VALID_LOCK_MULTIPLIER : "UNUSED",
									INVALID_LOCK_MULTIPLIER = USING_LOCKED() ? WYS_INVALID_LOCK_MULTIPLIER : "UNUSED",
									SWITCH_OVER_ON_LOSSCLK = USED(SWITCH_OVER_ON_LOSSCLK) & USING_INCLK0() & USING_INCLK1() ? SWITCH_OVER_ON_LOSSCLK : "UNUSED",
									SWITCH_OVER_ON_GATED_LOCK = SWITCH_OVER_ON_GATED_LOCK,
									ENABLE_SWITCH_OVER_COUNTER = ENABLE_SWITCH_OVER_COUNTER,
									SWITCH_OVER_COUNTER = (ENABLE_SWITCH_OVER_COUNTER == "ON") & USING_INCLK0() & USING_INCLK1() ? SWITCH_OVER_COUNTER : "UNUSED",
									FEEDBACK_SOURCE = (OPERATION_MODE == "EXTERNAL_FEEDBACK") & USED(FEEDBACK_SOURCE) ? FEEDBACK_SOURCE : "UNUSED",
									BANDWIDTH = (BANDWIDTH_TYPE == "CUSTOM") & USED(BANDWIDTH) ? BANDWIDTH : "UNUSED",
									BANDWIDTH_TYPE = BANDWIDTH_TYPE,
									SPREAD_FREQUENCY = USED(SPREAD_FREQUENCY) ? SPREAD_FREQUENCY : "UNUSED",
									DOWN_SPREAD = USED(DOWN_SPREAD) ? DOWN_SPREAD : DOWN_SPREAD,
									VCO_MIN = USED(VCO_MIN) ? VCO_MIN : "UNUSED",
									VCO_MAX = USED(VCO_MAX) ? VCO_MAX : "UNUSED",
									VCO_CENTER = USED(VCO_CENTER) ? VCO_CENTER : "UNUSED",
									PFD_MIN = USED(PFD_MIN) ? PFD_MIN : "UNUSED",
									PFD_MAX = USED(PFD_MAX) ? PFD_MAX : "UNUSED",
									GATE_LOCK_SIGNAL = USED(GATE_LOCK_SIGNAL) ? GATE_LOCK_SIGNAL : "UNUSED",
									M_INITIAL = USED(M_INITIAL) & USING_ADVANCED_PARAMETERS() ? M_INITIAL : "UNUSED",
									M = USED(M) & USING_ADVANCED_PARAMETERS() ? M : "UNUSED",
									N = USED(N) & USING_ADVANCED_PARAMETERS() ? N : "UNUSED",
									M2 = USED(M2) & USING_ADVANCED_PARAMETERS() ? M2 : "UNUSED",
									N2 = USED(N2) & USING_ADVANCED_PARAMETERS() ? N2 : "UNUSED",
									SS = USED(SS) & USING_ADVANCED_PARAMETERS() ? SS : "UNUSED",
									L0_HIGH = USED(L0_HIGH) & USING_ADVANCED_PARAMETERS() ? L0_HIGH : "UNUSED",
									L1_HIGH = USED(L1_HIGH) & USING_ADVANCED_PARAMETERS() ? L1_HIGH : "UNUSED",
									G0_HIGH = USED(G0_HIGH) & USING_ADVANCED_PARAMETERS() ? G0_HIGH : "UNUSED",
									G1_HIGH = USED(G1_HIGH) & USING_ADVANCED_PARAMETERS() ? G1_HIGH : "UNUSED",
									G2_HIGH = USED(G2_HIGH) & USING_ADVANCED_PARAMETERS() ? G2_HIGH : "UNUSED",
									G3_HIGH = USED(G3_HIGH) & USING_ADVANCED_PARAMETERS() ? G3_HIGH : "UNUSED", 
									E0_HIGH = USED(E0_HIGH) & USING_ADVANCED_PARAMETERS() ? E0_HIGH : "UNUSED",
									E1_HIGH = USED(E1_HIGH) & USING_ADVANCED_PARAMETERS() ? E1_HIGH : "UNUSED",
									E2_HIGH = USED(E2_HIGH) & USING_ADVANCED_PARAMETERS() ? E2_HIGH : "UNUSED",
									E3_HIGH = USED(E3_HIGH) & USING_ADVANCED_PARAMETERS() ? E3_HIGH : "UNUSED", 
									L0_LOW = USED(L0_LOW) & USING_ADVANCED_PARAMETERS() ? L0_LOW : "UNUSED",
									L1_LOW = USED(L1_LOW) & USING_ADVANCED_PARAMETERS() ? L1_LOW : "UNUSED",
									G3_LOW = USED(G3_LOW) & USING_ADVANCED_PARAMETERS() ? G3_LOW : "UNUSED",
									G2_LOW = USED(G2_LOW) & USING_ADVANCED_PARAMETERS() ? G2_LOW : "UNUSED",
									G1_LOW = USED(G1_LOW) & USING_ADVANCED_PARAMETERS() ? G1_LOW : "UNUSED",
									G0_LOW = USED(G0_LOW) & USING_ADVANCED_PARAMETERS() ? G0_LOW : "UNUSED",
									E3_LOW = USED(E3_LOW) & USING_ADVANCED_PARAMETERS() ? E3_LOW : "UNUSED",
									E2_LOW = USED(E2_LOW) & USING_ADVANCED_PARAMETERS() ? E2_LOW : "UNUSED",
									E1_LOW = USED(E1_LOW) & USING_ADVANCED_PARAMETERS() ? E1_LOW : "UNUSED",
									E0_LOW = USED(E0_LOW) & USING_ADVANCED_PARAMETERS() ? E0_LOW : "UNUSED",
									L0_INITIAL = USED(L0_INITIAL) & USING_ADVANCED_PARAMETERS() ? L0_INITIAL : "UNUSED",
									L1_INITIAL = USED(L1_INITIAL) & USING_ADVANCED_PARAMETERS() ? L1_INITIAL : "UNUSED",
									G3_INITIAL = USED(G3_INITIAL) & USING_ADVANCED_PARAMETERS() ? G3_INITIAL : "UNUSED",
									G2_INITIAL = USED(G2_INITIAL) & USING_ADVANCED_PARAMETERS() ? G2_INITIAL : "UNUSED",
									G1_INITIAL = USED(G1_INITIAL) & USING_ADVANCED_PARAMETERS() ? G1_INITIAL : "UNUSED",
									G0_INITIAL = USED(G0_INITIAL) & USING_ADVANCED_PARAMETERS() ? G0_INITIAL : "UNUSED",
									E3_INITIAL = USED(E3_INITIAL) & USING_ADVANCED_PARAMETERS() ? E3_INITIAL : "UNUSED",
									E2_INITIAL = USED(E2_INITIAL) & USING_ADVANCED_PARAMETERS() ? E2_INITIAL : "UNUSED",
									E1_INITIAL = USED(E1_INITIAL) & USING_ADVANCED_PARAMETERS() ? E1_INITIAL : "UNUSED",
									E0_INITIAL = USED(E0_INITIAL) & USING_ADVANCED_PARAMETERS() ? E0_INITIAL : "UNUSED",
									L0_MODE = USED(L0_MODE) & USING_ADVANCED_PARAMETERS() ? L0_MODE : "UNUSED",
									L1_MODE = USED(L1_MODE) & USING_ADVANCED_PARAMETERS() ? L1_MODE : "UNUSED",
									G3_MODE = USED(G3_MODE) & USING_ADVANCED_PARAMETERS() ? G3_MODE : "UNUSED",
									G2_MODE = USED(G2_MODE) & USING_ADVANCED_PARAMETERS() ? G2_MODE : "UNUSED",
									G1_MODE = USED(G1_MODE) & USING_ADVANCED_PARAMETERS() ? G1_MODE : "UNUSED",
									G0_MODE = USED(G0_MODE) & USING_ADVANCED_PARAMETERS() ? G0_MODE : "UNUSED",
									E3_MODE = USED(E3_MODE) & USING_ADVANCED_PARAMETERS() ? E3_MODE : "UNUSED",
									E2_MODE = USED(E2_MODE) & USING_ADVANCED_PARAMETERS() ? E2_MODE : "UNUSED",
									E1_MODE = USED(E1_MODE) & USING_ADVANCED_PARAMETERS() ? E1_MODE : "UNUSED",
									E0_MODE = USED(E0_MODE) & USING_ADVANCED_PARAMETERS() ? E0_MODE : "UNUSED",
									L0_PH = USED(L0_PH) & USING_ADVANCED_PARAMETERS() ? L0_PH : "UNUSED",
									L1_PH = USED(L1_PH) & USING_ADVANCED_PARAMETERS() ? L1_PH : "UNUSED",
									G0_PH = USED(G0_PH) & USING_ADVANCED_PARAMETERS() ? G0_PH : "UNUSED",
									G1_PH = USED(G1_PH) & USING_ADVANCED_PARAMETERS() ? G1_PH : "UNUSED",
									G2_PH = USED(G2_PH) & USING_ADVANCED_PARAMETERS() ? G2_PH : "UNUSED",
									G3_PH = USED(G3_PH) & USING_ADVANCED_PARAMETERS() ? G3_PH : "UNUSED",
									E0_PH = USED(E0_PH) & USING_ADVANCED_PARAMETERS() ? E0_PH : "UNUSED",
									E1_PH = USED(E1_PH) & USING_ADVANCED_PARAMETERS() ? E1_PH : "UNUSED",
									E2_PH = USED(E2_PH) & USING_ADVANCED_PARAMETERS() ? E2_PH : "UNUSED",
									E3_PH = USED(E3_PH) & USING_ADVANCED_PARAMETERS() ? E3_PH : "UNUSED",
									M_PH = USED(M_PH) & USING_ADVANCED_PARAMETERS() ? M_PH : "UNUSED",
									L0_TIME_DELAY = USED(L0_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? L0_TIME_DELAY : "UNUSED",
									L1_TIME_DELAY = USED(L1_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? L1_TIME_DELAY : "UNUSED",
									G0_TIME_DELAY = USED(G0_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? G0_TIME_DELAY : "UNUSED",
									G1_TIME_DELAY = USED(G1_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? G1_TIME_DELAY : "UNUSED",
									G2_TIME_DELAY = USED(G2_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? G2_TIME_DELAY : "UNUSED",
									G3_TIME_DELAY = USED(G3_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? G3_TIME_DELAY : "UNUSED",
									E0_TIME_DELAY = USED(E0_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? E0_TIME_DELAY : "UNUSED",
									E1_TIME_DELAY = USED(E1_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? E1_TIME_DELAY : "UNUSED",
									E2_TIME_DELAY = USED(E2_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? E2_TIME_DELAY : "UNUSED",
									E3_TIME_DELAY = USED(E3_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? E3_TIME_DELAY : "UNUSED",
									M_TIME_DELAY = USED(M_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? M_TIME_DELAY : "UNUSED",
									N_TIME_DELAY = USED(N_TIME_DELAY) & USING_ADVANCED_PARAMETERS() ? N_TIME_DELAY : "UNUSED",
									EXTCLK3_COUNTER = USED(EXTCLK3_COUNTER) & USING_ADVANCED_PARAMETERS() ? EXTCLK3_COUNTER : "UNUSED",
									EXTCLK2_COUNTER = USED(EXTCLK2_COUNTER) & USING_ADVANCED_PARAMETERS() ? EXTCLK2_COUNTER : "UNUSED",
									EXTCLK1_COUNTER = USED(EXTCLK1_COUNTER) & USING_ADVANCED_PARAMETERS() ? EXTCLK1_COUNTER : "UNUSED",
									EXTCLK0_COUNTER = USED(EXTCLK0_COUNTER) & USING_ADVANCED_PARAMETERS() ? EXTCLK0_COUNTER : "UNUSED",
									CLK5_COUNTER = USED(CLK5_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK5_COUNTER : "UNUSED",
									CLK4_COUNTER = USED(CLK4_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK4_COUNTER : "UNUSED",
									CLK3_COUNTER = USED(CLK3_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK3_COUNTER : "UNUSED",
									CLK2_COUNTER = USED(CLK2_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK2_COUNTER : "UNUSED",
									CLK1_COUNTER = USED(CLK1_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK1_COUNTER : "UNUSED",
									CLK0_COUNTER = USED(CLK0_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK0_COUNTER : "UNUSED",
									CHARGE_PUMP_CURRENT = USED(CHARGE_PUMP_CURRENT) & USING_ADVANCED_PARAMETERS() ? CHARGE_PUMP_CURRENT : "UNUSED",
									LOOP_FILTER_R = USED(LOOP_FILTER_R) & USING_ADVANCED_PARAMETERS() ? LOOP_FILTER_R : "UNUSED",
									LOOP_FILTER_C = USED(LOOP_FILTER_C) & USING_ADVANCED_PARAMETERS() ? LOOP_FILTER_C : "UNUSED",
									ENABLE0_COUNTER = USED(ENABLE0_COUNTER) & USING_ADVANCED_PARAMETERS() ? ENABLE0_COUNTER : "UNUSED",
									ENABLE1_COUNTER = USED(ENABLE1_COUNTER) & USING_ADVANCED_PARAMETERS() ? ENABLE1_COUNTER : "UNUSED"
								);
	ELSE GENERATE
		pll : stratixii_pll WITH(
									SELF_RESET_ON_GATED_LOSS_LOCK = USED(SELF_RESET_ON_GATED_LOSS_LOCK) ? SELF_RESET_ON_GATED_LOSS_LOCK : "UNUSED",
									OPERATION_MODE = USED(OPERATION_MODE) ? OPERATION_MODE : "UNUSED",
									QUALIFY_CONF_DONE = USED(QUALIFY_CONF_DONE) ? QUALIFY_CONF_DONE : "UNUSED",
									COMPENSATE_CLOCK = USED(COMPENSATE_CLOCK) ? COMPENSATE_CLOCK : "UNUSED",
									PLL_TYPE = USED(PLL_TYPE) ? PLL_TYPE : "UNUSED",
									VCO_MULTIPLY_BY = USED(VCO_MULTIPLY_BY) ? VCO_MULTIPLY_BY : "UNUSED",
									VCO_DIVIDE_BY = USED(VCO_DIVIDE_BY) ? VCO_DIVIDE_BY : "UNUSED",
									SCLKOUT0_PHASE_SHIFT = USED(SCLKOUT0_PHASE_SHIFT) ? SCLKOUT0_PHASE_SHIFT : "UNUSED",
									SCLKOUT1_PHASE_SHIFT = USED(SCLKOUT1_PHASE_SHIFT) ? SCLKOUT1_PHASE_SHIFT : "UNUSED",
									VCO_POST_SCALE = USED(VCO_POST_SCALE) ? VCO_POST_SCALE : "UNUSED",
									CLK5_MULTIPLY_BY = USED(CLK5_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK5_MULTIPLY_BY : "UNUSED",
									CLK4_MULTIPLY_BY = USED(CLK4_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK4_MULTIPLY_BY : "UNUSED",
									CLK3_MULTIPLY_BY = USED(CLK3_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK3_MULTIPLY_BY : "UNUSED",
									CLK2_MULTIPLY_BY = USED(CLK2_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK2_MULTIPLY_BY : "UNUSED",
									CLK1_MULTIPLY_BY = USED(CLK1_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK1_MULTIPLY_BY : "UNUSED",
									CLK0_MULTIPLY_BY = USED(CLK0_MULTIPLY_BY) & USING_USER_PARAMETERS() ? CLK0_MULTIPLY_BY : "UNUSED",
									CLK5_DIVIDE_BY = USED(CLK5_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK5_DIVIDE_BY : "UNUSED",
									CLK4_DIVIDE_BY = USED(CLK4_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK4_DIVIDE_BY : "UNUSED",
									CLK3_DIVIDE_BY = USED(CLK3_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK3_DIVIDE_BY : "UNUSED",
									CLK2_DIVIDE_BY = USED(CLK2_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK2_DIVIDE_BY : "UNUSED",
									CLK1_DIVIDE_BY = USED(CLK1_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK1_DIVIDE_BY : "UNUSED",
									CLK0_DIVIDE_BY = USED(CLK0_DIVIDE_BY) & USING_USER_PARAMETERS() ? CLK0_DIVIDE_BY : "UNUSED",
									CLK5_PHASE_SHIFT = USED(CLK5_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK5_PHASE_SHIFT : "UNUSED",
									CLK4_PHASE_SHIFT = USED(CLK4_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK4_PHASE_SHIFT : "UNUSED",
									CLK3_PHASE_SHIFT = USED(CLK3_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK3_PHASE_SHIFT : "UNUSED",
									CLK2_PHASE_SHIFT = USED(CLK2_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK2_PHASE_SHIFT : "UNUSED",
									CLK1_PHASE_SHIFT = USED(CLK1_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK1_PHASE_SHIFT : "UNUSED",
									CLK0_PHASE_SHIFT = USED(CLK0_PHASE_SHIFT) & USING_USER_PARAMETERS() ? CLK0_PHASE_SHIFT : "UNUSED",
									CLK5_DUTY_CYCLE = USED(CLK5_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK5_DUTY_CYCLE : "UNUSED",
									CLK4_DUTY_CYCLE = USED(CLK4_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK4_DUTY_CYCLE : "UNUSED",
									CLK3_DUTY_CYCLE = USED(CLK3_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK3_DUTY_CYCLE : "UNUSED",
									CLK2_DUTY_CYCLE = USED(CLK2_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK2_DUTY_CYCLE : "UNUSED",
									CLK1_DUTY_CYCLE = USED(CLK1_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK1_DUTY_CYCLE : "UNUSED",
									CLK0_DUTY_CYCLE = USED(CLK0_DUTY_CYCLE) & USING_USER_PARAMETERS() ? CLK0_DUTY_CYCLE : "UNUSED",
									INCLK0_INPUT_FREQUENCY = USED(INCLK0_INPUT_FREQUENCY) ? INCLK0_INPUT_FREQUENCY : "UNUSED",
									INCLK1_INPUT_FREQUENCY = (INCLK1_INPUT_FREQUENCY != 0) ? INCLK1_INPUT_FREQUENCY : "UNUSED",
									GATE_LOCK_SIGNAL = USED(GATE_LOCK_SIGNAL) ? GATE_LOCK_SIGNAL : "UNUSED",
									GATE_LOCK_COUNTER = USED(GATE_LOCK_COUNTER) ? GATE_LOCK_COUNTER : "UNUSED",
									LOCK_HIGH = USED(LOCK_HIGH) ? LOCK_HIGH : "UNUSED",
									LOCK_LOW = USED(LOCK_LOW) ? LOCK_LOW : "UNUSED",
									VALID_LOCK_MULTIPLIER = USING_LOCKED() ? VALID_LOCK_MULTIPLIER : "UNUSED",
									INVALID_LOCK_MULTIPLIER = USING_LOCKED() ? INVALID_LOCK_MULTIPLIER : "UNUSED",
									SWITCH_OVER_ON_LOSSCLK = USED(SWITCH_OVER_ON_LOSSCLK) & USING_INCLK0() & USING_INCLK1() ? SWITCH_OVER_ON_LOSSCLK : "UNUSED",
									SWITCH_OVER_ON_GATED_LOCK = USED(SWITCH_OVER_ON_GATED_LOCK) ? SWITCH_OVER_ON_GATED_LOCK : "UNUSED",
									ENABLE_SWITCH_OVER_COUNTER = USED(ENABLE_SWITCH_OVER_COUNTER) ? ENABLE_SWITCH_OVER_COUNTER : "UNUSED",
									SWITCH_OVER_COUNTER = USED(SWITCH_OVER_COUNTER) & USING_INCLK0() & USING_INCLK1() ? SWITCH_OVER_COUNTER : "UNUSED",
									SWITCH_OVER_TYPE = USED(SWITCH_OVER_TYPE) ? SWITCH_OVER_TYPE : "UNUSED",
									FEEDBACK_SOURCE = (OPERATION_MODE == "EXTERNAL_FEEDBACK") & USED(FEEDBACK_SOURCE) ? FEEDBACK_SOURCE : "UNUSED",
									BANDWIDTH = USED(BANDWIDTH) & USING_USER_PARAMETERS() & (BANDWIDTH_TYPE == "CUSTOM") ? BANDWIDTH : "UNUSED",
									BANDWIDTH_TYPE = USED(BANDWIDTH_TYPE) & USING_USER_PARAMETERS() ? BANDWIDTH_TYPE : "UNUSED",
									SPREAD_FREQUENCY = USED(SPREAD_FREQUENCY) & USING_USER_PARAMETERS() ? SPREAD_FREQUENCY : "UNUSED",
									DOWN_SPREAD = USED(DOWN_SPREAD) & USING_USER_PARAMETERS() ? DOWN_SPREAD : "UNUSED",
									VCO_MIN = USED(VCO_MIN) ? VCO_MIN : "UNUSED",
									VCO_MAX = USED(VCO_MAX) ? VCO_MAX : "UNUSED",
									VCO_CENTER = USED(VCO_CENTER) ? VCO_CENTER : "UNUSED",
									PFD_MIN = USED(PFD_MIN) ? PFD_MIN : "UNUSED",
									PFD_MAX = USED(PFD_MAX) ? PFD_MAX : "UNUSED",
									M_INITIAL = USED(M_INITIAL) & USING_ADVANCED_PARAMETERS() ? M_INITIAL : "UNUSED",
									M = USED(M) & USING_ADVANCED_PARAMETERS() ? M : "UNUSED",
									N = USED(N) & USING_ADVANCED_PARAMETERS() ? N : "UNUSED",
									M2 = USED(M2) & USING_ADVANCED_PARAMETERS() ? M2 : "UNUSED",
									N2 = USED(N2) & USING_ADVANCED_PARAMETERS() ? N2 : "UNUSED",
									SS = USED(SS) & USING_ADVANCED_PARAMETERS() ? SS : "UNUSED",
									C0_HIGH = USED(C0_HIGH) & USING_ADVANCED_PARAMETERS() ? C0_HIGH : "UNUSED",
									C1_HIGH = USED(C1_HIGH) & USING_ADVANCED_PARAMETERS() ? C1_HIGH : "UNUSED",
									C2_HIGH = USED(C2_HIGH) & USING_ADVANCED_PARAMETERS() ? C2_HIGH : "UNUSED",
									C3_HIGH = USED(C3_HIGH) & USING_ADVANCED_PARAMETERS() ? C3_HIGH : "UNUSED",
									C4_HIGH = USED(C4_HIGH) & USING_ADVANCED_PARAMETERS() ? C4_HIGH : "UNUSED",
									C5_HIGH = USED(C5_HIGH) & USING_ADVANCED_PARAMETERS() ? C5_HIGH : "UNUSED",
									C0_LOW = USED(C0_LOW) & USING_ADVANCED_PARAMETERS() ? C0_LOW : "UNUSED",
									C1_LOW = USED(C1_LOW) & USING_ADVANCED_PARAMETERS() ? C1_LOW : "UNUSED",
									C2_LOW = USED(C2_LOW) & USING_ADVANCED_PARAMETERS() ? C2_LOW : "UNUSED",
									C3_LOW = USED(C3_LOW) & USING_ADVANCED_PARAMETERS() ? C3_LOW : "UNUSED",
									C4_LOW = USED(C4_LOW) & USING_ADVANCED_PARAMETERS() ? C4_LOW : "UNUSED",
									C5_LOW = USED(C5_LOW) & USING_ADVANCED_PARAMETERS() ? C5_LOW : "UNUSED",
									C0_INITIAL = USED(C0_INITIAL) & USING_ADVANCED_PARAMETERS() ? C0_INITIAL : "UNUSED",
									C1_INITIAL = USED(C1_INITIAL) & USING_ADVANCED_PARAMETERS() ? C1_INITIAL : "UNUSED",
									C2_INITIAL = USED(C2_INITIAL) & USING_ADVANCED_PARAMETERS() ? C2_INITIAL : "UNUSED",
									C3_INITIAL = USED(C3_INITIAL) & USING_ADVANCED_PARAMETERS() ? C3_INITIAL : "UNUSED",
									C4_INITIAL = USED(C4_INITIAL) & USING_ADVANCED_PARAMETERS() ? C4_INITIAL : "UNUSED",
									C5_INITIAL = USED(C5_INITIAL) & USING_ADVANCED_PARAMETERS() ? C5_INITIAL : "UNUSED", 
									C0_MODE = USED(C0_MODE) & USING_ADVANCED_PARAMETERS() ? C0_MODE : "UNUSED",
									C1_MODE = USED(C1_MODE) & USING_ADVANCED_PARAMETERS() ? C1_MODE : "UNUSED",
									C2_MODE = USED(C2_MODE) & USING_ADVANCED_PARAMETERS() ? C2_MODE : "UNUSED",
									C3_MODE = USED(C3_MODE) & USING_ADVANCED_PARAMETERS() ? C3_MODE : "UNUSED",
									C4_MODE = USED(C4_MODE) & USING_ADVANCED_PARAMETERS() ? C4_MODE : "UNUSED",
									C5_MODE = USED(C5_MODE) & USING_ADVANCED_PARAMETERS() ? C5_MODE : "UNUSED",
									C0_PH = USED(C0_PH) & USING_ADVANCED_PARAMETERS() ? C0_PH : "UNUSED",
									C1_PH = USED(C1_PH) & USING_ADVANCED_PARAMETERS() ? C1_PH : "UNUSED",
									C2_PH = USED(C2_PH) & USING_ADVANCED_PARAMETERS() ? C2_PH : "UNUSED",
									C3_PH = USED(C3_PH) & USING_ADVANCED_PARAMETERS() ? C3_PH : "UNUSED",
									C4_PH = USED(C4_PH) & USING_ADVANCED_PARAMETERS() ? C4_PH : "UNUSED",
									C5_PH = USED(C5_PH) & USING_ADVANCED_PARAMETERS() ? C5_PH : "UNUSED",
									M_PH = USED(M_PH) & USING_ADVANCED_PARAMETERS() ? M_PH : "UNUSED",
									C1_USE_CASC_IN = USED(C1_USE_CASC_IN) & USING_ADVANCED_PARAMETERS() ? C1_USE_CASC_IN : "UNUSED",
									C2_USE_CASC_IN = USED(C2_USE_CASC_IN) & USING_ADVANCED_PARAMETERS() ? C2_USE_CASC_IN : "UNUSED",
									C3_USE_CASC_IN = USED(C3_USE_CASC_IN) & USING_ADVANCED_PARAMETERS() ? C3_USE_CASC_IN : "UNUSED",
									C4_USE_CASC_IN = USED(C4_USE_CASC_IN) & USING_ADVANCED_PARAMETERS() ? C4_USE_CASC_IN : "UNUSED",
									C5_USE_CASC_IN = USED(C5_USE_CASC_IN) & USING_ADVANCED_PARAMETERS() ? C5_USE_CASC_IN : "UNUSED",
									CLK5_COUNTER = USED(CLK5_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK5_COUNTER : "UNUSED",
									CLK4_COUNTER = USED(CLK4_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK4_COUNTER : "UNUSED",
									CLK3_COUNTER = USED(CLK3_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK3_COUNTER : "UNUSED",
									CLK2_COUNTER = USED(CLK2_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK2_COUNTER : "UNUSED",
									CLK1_COUNTER = USED(CLK1_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK1_COUNTER : "UNUSED",
									CLK0_COUNTER = USED(CLK0_COUNTER) & USING_ADVANCED_PARAMETERS() ? CLK0_COUNTER : "UNUSED",
									ENABLE0_COUNTER = USED(ENABLE0_COUNTER) & USING_ADVANCED_PARAMETERS() ? ENABLE0_COUNTER : "UNUSED",
									ENABLE1_COUNTER = USED(ENABLE1_COUNTER) & USING_ADVANCED_PARAMETERS() ? ENABLE1_COUNTER : "UNUSED",
									CHARGE_PUMP_CURRENT = USED(CHARGE_PUMP_CURRENT) & USING_ADVANCED_PARAMETERS() ? CHARGE_PUMP_CURRENT : "UNUSED",
									LOOP_FILTER_R = USED(LOOP_FILTER_R) & USING_ADVANCED_PARAMETERS() ? LOOP_FILTER_R : "UNUSED",
									LOOP_FILTER_C = USED(LOOP_FILTER_C) & USING_ADVANCED_PARAMETERS() ? LOOP_FILTER_C : "UNUSED",
									M_TEST_SOURCE = USED(M_TEST_SOURCE) ? M_TEST_SOURCE : "UNUSED",
									C0_TEST_SOURCE = USED(C0_TEST_SOURCE) ? C0_TEST_SOURCE : "UNUSED",
									C1_TEST_SOURCE = USED(C1_TEST_SOURCE) ? C1_TEST_SOURCE : "UNUSED",
									C2_TEST_SOURCE = USED(C2_TEST_SOURCE) ? C2_TEST_SOURCE : "UNUSED",
									C3_TEST_SOURCE = USED(C3_TEST_SOURCE) ? C3_TEST_SOURCE : "UNUSED",
									C4_TEST_SOURCE = USED(C4_TEST_SOURCE) ? C4_TEST_SOURCE : "UNUSED",
									SCAN_CHAIN_MIF_FILE = USED(SCAN_CHAIN_MIF_FILE) ? SCAN_CHAIN_MIF_FILE : "UNUSED",
									SIM_GATE_LOCK_DEVICE_BEHAVIOR = USED(SIM_GATE_LOCK_DEVICE_BEHAVIOR)? SIM_GATE_LOCK_DEVICE_BEHAVIOR : "UNUSED"
		);
	END GENERATE; END GENERATE;
	ELSE GENERATE
		-- Clearbox version
		auto_generated : @CBXI_PARAMETER WITH (CBXI_PARAMETER = "NOTHING");
	END GENERATE;

	IF !USE_CLEARBOX() GENERATE
	-- wire primitives on outputs to give a better name to users
	IF (WIDTH_CLOCK > 5) GENERATE
	IF ((USED(clk5) & PORT_CLK5 == DEFAULT_USAGE) # PORT_CLK5 == PORT_USED) & !CYCLONEII_MEMBER() GENERATE
		_clk5 : WIRE;
	END GENERATE;
	END GENERATE;
	IF USING_CLK4() & !CYCLONEII_MEMBER() GENERATE
		_clk4 : WIRE;
	END GENERATE;
	IF USING_CLK3() & !CYCLONEII_MEMBER() GENERATE
		_clk3 : WIRE;
	END GENERATE;
	IF USING_CLK2() GENERATE
		_clk2 : WIRE;
	END GENERATE;
	IF USING_CLK1() GENERATE
		_clk1 : WIRE;
	END GENERATE;
	IF USING_CLK0() GENERATE
		_clk0 : WIRE;
	END GENERATE;
	IF ((PORT_EXTCLK3 == DEFAULT_USAGE) & USED(extclk3)) # (PORT_EXTCLK3 == PORT_USED) GENERATE
		_extclk3 : WIRE;
	END GENERATE;
	IF ((PORT_EXTCLK2 == DEFAULT_USAGE) & USED(extclk2)) # (PORT_EXTCLK2 == PORT_USED) GENERATE
		_extclk2 : WIRE;
	END GENERATE;
	IF ((PORT_EXTCLK1 == DEFAULT_USAGE) & USED(extclk1)) # (PORT_EXTCLK1 == PORT_USED) GENERATE
		_extclk1 : WIRE;
	END GENERATE;
	IF ((PORT_EXTCLK0 == DEFAULT_USAGE) & USED(extclk0)) # (PORT_EXTCLK0 == PORT_USED) GENERATE
		_extclk0 : WIRE;
	END GENERATE;
	IF ((PORT_CLKBAD1 == DEFAULT_USAGE) & USED(clkbad1)) # (PORT_CLKBAD1 == PORT_USED) GENERATE
		_clkbad1 : WIRE;
	END GENERATE;
	IF ((PORT_CLKBAD0 == DEFAULT_USAGE) & USED(clkbad0)) # (PORT_CLKBAD0 == PORT_USED) GENERATE
		_clkbad0 : WIRE;
	END GENERATE;
	IF USING_LOCKED() GENERATE
		_locked : WIRE;
	END GENERATE;
	IF ((PORT_ACTIVECLOCK == DEFAULT_USAGE) & USED(activeclock)) # (PORT_ACTIVECLOCK == PORT_USED) GENERATE
		_activeclock : WIRE;
	END GENERATE;
	IF ((PORT_CLKLOSS == DEFAULT_USAGE) & USED(clkloss)) # (PORT_CLKLOSS == PORT_USED) GENERATE
		_clkloss : WIRE;
	END GENERATE;
	IF USED(scandataout) & USED(scanclk) & FAMILY_HAS_SCAN_PORTS() GENERATE
		_scandataout : WIRE;
	END GENERATE;
	IF USED(scandone) & USED(scanclk) & FAMILY_HAS_SCAN_PORTS() GENERATE
		_scandone : WIRE;
	END GENERATE;
	IF USED(enable0) GENERATE
		_enable0 : WIRE;
	END GENERATE;
	IF USED(enable1) GENERATE
		_enable1 : WIRE;
	END GENERATE;
	IF SCLKOUT0_SUPPORTED() & USED(sclkout0) GENERATE
		_sclkout0 : WIRE;
	END GENERATE;
	IF SCLKOUT1_SUPPORTED() & USED(sclkout1) GENERATE
		_sclkout1 : WIRE;
	END GENERATE;
	END GENERATE;
BEGIN
	IF !USE_CLEARBOX() GENERATE
	ASSERT (SWITCH_OVER_TYPE == "AUTO") # (SWITCH_OVER_TYPE == "MANUAL")
		REPORT "The SWITCH_OVER_TYPE (%) parameter is set to an illegal value." SWITCH_OVER_TYPE
		SEVERITY ERROR;

	-- Cause: Only a value of 1 is permitted for VALID_LOCK_MULTIPLIER but it is specified as a value other than 1
	-- Action: Set the value of the VALID_LOCK_MULTIPLIER to 1 to prevent this message
	ASSERT VALID_LOCK_MULTIPLIER == 1
		REPORT "The value of VALID_LOCK_MULTIPLIER(%) has been switched to 1 since this is the only supported value for the % family." VALID_LOCK_MULTIPLIER, DEVICE_FAMILY
		SEVERITY INFO
		HELP_ID ALTPLL_VALID_LOCK_MULTIPLIER_SWITCH;
	
	-- Cause: Only a value of 5 is permitted for INVALID_LOCK_MULTIPLIER bit it is specified as a value other than 5
	-- Action: Set the value of the INVALID_LOCK_MULTIPLIER to 5 to prevent this message
	ASSERT INVALID_LOCK_MULTIPLIER == 5
		REPORT "The value of INVALID_LOCK_MULTIPLIER(%) has been switched to 5 since this is the only supported value for the % family." INVALID_LOCK_MULTIPLIER, DEVICE_FAMILY
		SEVERITY INFO
		HELP_ID ALTPLL_INVALID_LOCK_MULTIPLIER_SWITCH;

	-- Cause: The GATE_LOCK_SIGNAL parameter is set to an illegal value
	-- Action: Set the parameter to one of its legal values "YES", "NO"
	ASSERT (GATE_LOCK_SIGNAL == "YES") # (GATE_LOCK_SIGNAL == "NO")
		REPORT "GATE_LOCK_SIGNAL(%) is set to an illegal value." GATE_LOCK_SIGNAL
		SEVERITY ERROR
		HELP_ID ALTPLL_GATE_LOCK_SIGNAL_INVALID;

	ASSERT ((ENABLE1_COUNTER == L0_COUNTER) # (ENABLE1_COUNTER == L1_COUNTER) & (FAMILY_BASE_STRATIX() == 1)) # (FAMILY_BASE_STRATIX() != 1)
		REPORT "The ENABLE1_COUNTER(%) is set to an illegal value." ENABLE1_COUNTER
		SEVERITY ERROR
		HELP_ID ALTPLL_ENABLE_COUNTER_ILLEGAL;

	ASSERT SWITCH_OVER_ON_GATED_LOCK != "ON"
		REPORT "SWITCH_OVER_ON_GATED_LOCK is not supported in this version of Quartus."
		SEVERITY ERROR
		HELP_ID ALTPLL_SWITCH_OVER_ON_GATED_LOCK_NOT_SUPPORTED;

	-- Cause: The SWITCH_OVER_ON_GATED_LOCK parameter is set to an illegal value
	-- Action: Set it to one of its legal values: "ON", "OFF"
	ASSERT (SWITCH_OVER_ON_GATED_LOCK == "ON") # (SWITCH_OVER_ON_GATED_LOCK == "OFF")
		REPORT "SWITCH_OVER_ON_GATED_LOCK(%) is set to an illegal value." SWITCH_OVER_ON_GATED_LOCK
		SEVERITY ERROR
		HELP_ID ALTPLL_ILLEGAL_SWITCH_OVER_ON_GATED_LOCK;
	
	-- Cause: The ENABLE_SWITCH_OVER_COUNTER parameter is set to an illegal value
	-- Action: Set it to one of its legal values: "ON", "OFF"
	ASSERT (ENABLE_SWITCH_OVER_COUNTER == "ON") # (ENABLE_SWITCH_OVER_COUNTER == "OFF")
		REPORT "ENABLE_SWITCH_OVER_COUNTER(%) is set to an illegal value." ENABLE_SWITCH_OVER_COUNTER
		HELP_ID ALTPLL_ILLEGAL_ENABLE_SWITCH_OVER_COUNTER;

	-- Cause: The TYPE parameter is set to an illegal value
	-- Action: Set the TYPE parameter to one of the legal values: "FAST", "ENHANCED", and "AUTO"
	ASSERT (PLL_TYPE == TYPE_AUTO) # (PLL_TYPE == TYPE_ENHANCED) # (PLL_TYPE == TYPE_FAST)
		REPORT "PLL_TYPE(%) parameter is set to illegal value." PLL_TYPE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_TYPE_PARAMETER;

	-- Cause: The SKIP_VCO parameter is set to an illegal value
	-- Action: Set the SKIP_VCO parameter to one of the legal values "ON", "OFF"
		ASSERT SKIP_VCO == "ON" # SKIP_VCO == "OFF"
		REPORT "SKIP_VCO(%) parameter is set to an illegal value." SKIP_VCO
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_SKIP_VCO;

	-- Cause: The altpll megafunction is only available for the Stratix device family
	-- Action: Switch the device family to Stratix to use this megafunction
	ASSERT (FAMILY_STRATIX() == 1) # (FAMILY_STRATIXII() == 1)
		REPORT "The altpll megafunction is only supported in the Stratix and Stratix II device familes, but the current device is %." DEVICE_FAMILY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_FAMILY;
	
	-- Cause: the inclk[0] port is not connected
	-- Action: Connect the inclock[0] port
	ASSERT USING_INCLK0()
		REPORT "The 'inclk[0]' port must be connected"
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_INCLOCK0_UNCONNECTED;
	
	-- Cause: The operation mode parameter is set to an illegal value
	-- Action: Set the parameter to one of the legal values: "NORMAL", "ZERO_DELAY_BUFFER", "EXTERNAL_FEEDBACK", or "NO_COMPENSATION"
	ASSERT (OPERATION_MODE == "NORMAL") # (OPERATION_MODE == "ZERO_DELAY_BUFFER") # (OPERATION_MODE == "EXTERNAL_FEEDBACK") # (OPERATION_MODE == "NO_COMPENSATION") # (OPERATION_MODE == "SOURCE_SYNCHRONOUS")
		REPORT "OPERATION_MODE(%) parameter is set to an illegal value." OPERATION_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_OPERATION_MODE;

	-- Cause: This parameter is set to a value other than "ON" or "OFF" which are tis only legal values
	-- Action: Set the parameter to "ON" or "OFF"
	ASSERT (QUALIFY_CONF_DONE == "ON") # (QUALIFY_CONF_DONE == "OFF")
		REPORT "QUALIFY_CONF_DONE(%) is set to an illegal value." QUALIFY_CONF_DONE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ON_OFF_ERROR;
	
	-- Cause: The value "ON" is not currently supported for the QUAIFY_CONF_DONE parameter
	-- Action: Set the value of the parameter to "OFF"
	ASSERT (QUALIFY_CONF_DONE == "OFF")
		REPORT """ON"" is not supported for the QUALIFY_CONF_DONE parameter"
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_OFF_QUALIFY_CONF_DONE;

	ASSERT (SWITCH_OVER_ON_LOSSCLK == "ON") # (SWITCH_OVER_ON_LOSSCLK == "OFF")
		REPORT "SWITCH_OVER_ON_LOSSCLK(%) is set to an illegal value." SWITCH_OVER_ON_LOSSCLK
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ON_OFF_ERROR;
	
	IF !STRATIXII_MEMBER() & !CYCLONEII_MEMBER() GENERATE
		-- Cause: The COMPENSATE_CLOCK parameter is set to an illegal value for "NORMAL" mode
		-- Action: Set it to one of the legal values for "NORMAL" mode : "CLK0", "CLK1", "CLK2", "CLK3", "CLK4", "CLK5", "GCLK", "LCLK", or "LVDSCLK"
		ASSERT !NORMAL_MODE() #!USED(COMPENSATE_CLOCK) # ((COMPENSATE_CLOCK == CLOCK0) # (COMPENSATE_CLOCK == CLOCK1) # (COMPENSATE_CLOCK == CLOCK2) #
		(COMPENSATE_CLOCK == CLOCK3) # (COMPENSATE_CLOCK == CLOCK4) # (COMPENSATE_CLOCK == CLOCK5) # (COMPENSATE_CLOCK == "GCLK") #
		(COMPENSATE_CLOCK == "LCLK") # (COMPENSATE_CLOCK == "LVDSCLK"))
			REPORT "COMPENSATE_CLOCK(%) is set to an illegal value for NORMAL mode." COMPENSATE_CLOCK
			SEVERITY ERROR
			HELP_ID ALTCLKLOCK_STRATIX_COMPENSATE_CLOCK_NORMAL;
	
		ASSERT !ZERO_DELAY_BUFFER_MODE() #!USED(COMPENSATE_CLOCK) # ((COMPENSATE_CLOCK == EXT_CLK0) # (COMPENSATE_CLOCK == EXT_CLK1) #
				(COMPENSATE_CLOCK == EXT_CLK2) # (COMPENSATE_CLOCK == EXT_CLK3))
			REPORT "COMPENSATE_CLOCK(%)	is set to an illegal value for ZERO_DELAY_BUFFER mode." COMPENSATE_CLOCK
			SEVERITY ERROR
			HELP_ID ALTCLKLOCK_STRATIX_COMPENSATE_CLOCK_ZERO_DELAY_BUFFER;
	END GENERATE;

	-- Cause: The specified parameter has a value that is not greater than 0
	-- Action: Set the parameter to a value that is greater than 0
	ASSERT CLK5_MULTIPLY_BY > 0
		REPORT "CLK5_MULTIPLY_BY(%) must be greater than 0." CLK5_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT CLK4_MULTIPLY_BY > 0
		REPORT "CLK4_MULTIPLY_BY(%) must be greater than 0." CLK4_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
	
	ASSERT CLK3_MULTIPLY_BY > 0
		REPORT "CLK3_MULTIPLY_BY(%) must be greater than 0." CLK3_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
	
	ASSERT CLK2_MULTIPLY_BY > 0
		REPORT "CLK2_MULTIPLY_BY(%) must be greater than 0." CLK2_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT CLK1_MULTIPLY_BY > 0
		REPORT "CLK1_MULTIPLY_BY(%) must be greater than 0." CLK1_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT CLK0_MULTIPLY_BY > 0
		REPORT "CLK0_MULTIPLY_BY(%) must be greater than 0." CLK0_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT CLK5_DIVIDE_BY > 0
		REPORT "CLK5_DIVIDE_BY(%) must be greater than 0." CLK5_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
	
	ASSERT CLK4_DIVIDE_BY > 0
		REPORT "CLK4_DIVIDE_BY(%) must be greater than 0." CLK4_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT CLK3_DIVIDE_BY > 0
		REPORT "CLK3_DIVIDE_BY(%) must be greater than 0." CLK3_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT CLK2_DIVIDE_BY > 0
		REPORT "CLK2_DIVIDE_BY(%) must be greater than 0." CLK2_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
	
	ASSERT CLK1_DIVIDE_BY > 0
		REPORT "CLK1_DIVIDE_BY(%) must be greater than 0." CLK1_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
	
	ASSERT CLK0_DIVIDE_BY > 0
		REPORT "CLK0_DIVIDE_BY(%) must be greater than 0." CLK0_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
	
	ASSERT EXTCLK3_MULTIPLY_BY > 0
		REPORT "EXTCLK3_MULTIPLY_BY(%) must be greater than 0." EXTCLK3_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT EXTCLK2_MULTIPLY_BY > 0
		REPORT "EXTCLK2_MULTIPLY_BY(%) must be greater than 0." EXTCLK2_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
		
	ASSERT EXTCLK1_MULTIPLY_BY > 0
		REPORT "EXTCLK1_MULTIPLY_BY(%) must be greater than 0." EXTCLK1_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT EXTCLK0_MULTIPLY_BY > 0
		REPORT "EXTCLK0_MULTIPLY_BY(%) must be greater than 0." EXTCLK0_MULTIPLY_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT EXTCLK3_DIVIDE_BY > 0
		REPORT "EXTCLK3_DIVIDE_BY(%) must be greater than 0." EXTCLK3_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;
		
	ASSERT EXTCLK2_DIVIDE_BY > 0
		REPORT "EXTCLK2_DIVIDE_BY(%) must be greater than 0." EXTCLK2_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT EXTCLK1_DIVIDE_BY > 0
		REPORT "EXTCLK1_DIVIDE_BY(%) must be greater than 0." EXTCLK1_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	ASSERT EXTCLK0_DIVIDE_BY > 0
		REPORT "EXTCLK0_DIVIDE_BY(%) must be greater than 0." EXTCLK0_DIVIDE_BY
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_PARAMETER_IS_ZERO;

	-- Cause: PRIMARY_CLOCK is set to an illegal value
	-- Action: Set the parameter to one of its legal values: "INCLK0" or "INCLK1"
	ASSERT (PRIMARY_CLOCK == "INCLK0") # (PRIMARY_CLOCK == "INCLK1")
		REPORT "PRIMARY_CLOCK(%) is set to an illegal value." PRIMARY_CLOCK
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_PRIMARY_CLOCK;
	
	-- Cause: The specified parameter has an illegal value
	-- Action: Set the parameter to one of its legal values: "BYPASS", "ODD", or "EVEN"
	ASSERT (L0_MODE == ODD_MODE) # (L0_MODE == EVEN_MODE) # (L0_MODE == BYPASS_MODE)
		REPORT "L0_MODE(%) is set to an illegal value." L0_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;
	
	ASSERT (L1_MODE == ODD_MODE) # (L1_MODE == EVEN_MODE) # (L1_MODE == BYPASS_MODE)
		REPORT "L1_MODE(%) is set to an illegal value." L1_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (G0_MODE == ODD_MODE) # (G0_MODE == EVEN_MODE) # (G0_MODE == BYPASS_MODE)
		REPORT "G0_MODE(%) is set to an illegal value." G0_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (G1_MODE == ODD_MODE) # (G1_MODE == EVEN_MODE) # (G1_MODE == BYPASS_MODE)
		REPORT "G1_MODE(%) is set to an illegal value." G1_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;
	
	ASSERT (G2_MODE == ODD_MODE) # (G2_MODE == EVEN_MODE) # (G2_MODE == BYPASS_MODE)
		REPORT "G2_MODE(%) is set to an illegal value." G2_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (G3_MODE == ODD_MODE) # (G3_MODE == EVEN_MODE) # (G3_MODE == BYPASS_MODE)
		REPORT "G3_MODE(%) is set to an illegal value." G3_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (E0_MODE == ODD_MODE) # (E0_MODE == EVEN_MODE) # (E0_MODE == BYPASS_MODE)
		REPORT "E0_MODE(%) is set to an illegal value." E0_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (E1_MODE == ODD_MODE) # (E1_MODE == EVEN_MODE) # (E1_MODE == BYPASS_MODE)
		REPORT "E1_MODE(%) is set to an illegal value." E1_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (E2_MODE == ODD_MODE) # (E2_MODE == EVEN_MODE) # (E2_MODE == BYPASS_MODE)
		REPORT "E2_MODE(%) is set to an illegal value." E2_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (E3_MODE == ODD_MODE) # (E3_MODE == EVEN_MODE) # (E3_MODE == BYPASS_MODE)
		REPORT "E3_MODE(%) is set to an illegal value." E3_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (C0_MODE == ODD_MODE) # (C0_MODE == EVEN_MODE) # (C0_MODE == BYPASS_MODE)
		REPORT "C0_MODE(%) is set to an illegal value." C0_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;


	ASSERT (C1_MODE == ODD_MODE) # (C1_MODE == EVEN_MODE) # (C1_MODE == BYPASS_MODE)
		REPORT "C1_MODE(%) is set to an illegal value." C1_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;


	ASSERT (C2_MODE == ODD_MODE) # (C2_MODE == EVEN_MODE) # (C2_MODE == BYPASS_MODE)
		REPORT "C2_MODE(%) is set to an illegal value." C2_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;


	ASSERT (C3_MODE == ODD_MODE) # (C3_MODE == EVEN_MODE) # (C3_MODE == BYPASS_MODE)
		REPORT "C3_MODE(%) is set to an illegal value." C3_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;


	ASSERT (C4_MODE == ODD_MODE) # (C4_MODE == EVEN_MODE) # (C4_MODE == BYPASS_MODE)
		REPORT "C4_MODE(%) is set to an illegal value." C4_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;

	ASSERT (C5_MODE == ODD_MODE) # (C5_MODE == EVEN_MODE) # (C5_MODE == BYPASS_MODE)
		REPORT "C5_MODE(%) is set to an illegal value." C5_MODE
		SEVERITY ERROR
		HELP_ID ALTCLKLOCK_STRATIX_ILLEGAL_COUNTER_MODE;


	-- Action: Set it to one of its legal values: "LOW", "HIGH", "MEDIUM", "AUTO", "CUSTOM"
	ASSERT (BANDWIDTH_TYPE == BANDWIDTH_LOW) # (BANDWIDTH_TYPE == BANDWIDTH_HIGH) # (BANDWIDTH_TYPE == BANDWIDTH_MEDIUM) #
			(BANDWIDTH_TYPE == BANDWIDTH_AUTO) # (BANDWIDTH_TYPE == BANDWIDTH_CUSTOM)
		REPORT "BANDWIDTH_TYPE(%) is set to an illegal value." BANDWIDTH_TYPE
		SEVERITY ERROR
		HELP_ID ALTPLL_ILLEGAL_BANDWIDTH_TYPE;
	
	-- Cause: The SCAN_CHAIN parameter is set to an illegal value
	-- Action: Set the SCAN_CHAIN parameter to one of its legal values: "SHORT", "LONG"
	ASSERT (SCAN_CHAIN == SCAN_SHORT) # (SCAN_CHAIN == SCAN_LONG)
		REPORT "SCAN_CHAIN(%) is set to an illegal value." SCAN_CHAIN
		SEVERITY ERROR
		HELP_ID ALTPLL_ILLEGAL_SCAN_VALUE;

	-- Cause: The BANDWIDTH_TYPE is set to "CUSTOM" but the BANDWIDTH parameter is not set
	-- Action: Do not use "CUSTOM" mode or set the BANDWIDTH parameter
	ASSERT !(BANDWIDTH_TYPE == BANDWIDTH_CUSTOM) # USED(BANDWIDTH)
		REPORT "BANDWIDTH_TYPE is set to ""CUSTOM"" but no value has been specified for the BANDWIDTH parameter."
		SEVERITY ERROR
		HELP_ID ALTPLL_CUSTOM_BANDWIDTH_NO_BAND_SET;

	----------------------
	-- Port Connections --
	----------------------
	-- The inputs
	IF USING_INCLK1() GENERATE
		pll.inclk[1] = inclk[1];
	END GENERATE;
	IF USING_INCLK0() GENERATE
		pll.inclk[0] = inclk[0];
	END GENERATE;
	IF ((USED(fbin) & (PORT_FBIN == DEFAULT_USAGE)) # (PORT_FBIN == PORT_USED)) & EXTERNAL_FEEDBACK_MODE() GENERATE
		pll.fbin = fbin;
	END GENERATE;
	IF ((USED(pllena) & (PORT_PLLENA == DEFAULT_USAGE)) # (PORT_PLLENA == PORT_USED)) GENERATE
		pll.ena = pllena;
	END GENERATE;
	IF ((USED(clkswitch) & (PORT_CLKSWITCH == DEFAULT_USAGE)) # (PORT_CLKSWITCH == PORT_USED)) & USING_INCLK0() & USING_INCLK1() GENERATE
		pll.clkswitch = clkswitch;
	END GENERATE;
	IF ((USED(areset) & (PORT_ARESET == DEFAULT_USAGE)) # (PORT_ARESET == PORT_USED)) GENERATE
		pll.areset = areset;
	END GENERATE;
	IF ((USED(pfdena) & (PORT_PFDENA == DEFAULT_USAGE)) # (PORT_PFDENA == PORT_USED)) GENERATE
		pll.pfdena = pfdena;
	END GENERATE;
	IF ((USED(clkena5) & !FAST_TYPE()) # (PORT_CLKENA5 == PORT_USED)) & (PORT_CLKENA5 != PORT_UNUSED) GENERATE
		pll.clkena[5] = clkena[5];
	END GENERATE;
	IF ((USED(clkena4) & !FAST_TYPE()) # (PORT_CLKENA4 == PORT_USED)) & (PORT_CLKENA4 != PORT_UNUSED) GENERATE
		pll.clkena[4] = clkena[4];
	END GENERATE;
	IF ((USED(clkena3) & !FAST_TYPE()) # (PORT_CLKENA3 == PORT_USED)) & (PORT_CLKENA3 != PORT_UNUSED) GENERATE
		pll.clkena[3] = clkena[3];
	END GENERATE;
	IF ((USED(clkena2) & !FAST_TYPE()) # (PORT_CLKENA2 == PORT_USED)) & (PORT_CLKENA2 != PORT_UNUSED) GENERATE
		pll.clkena[2] = clkena[2];
	END GENERATE;
	IF ((USED(clkena1) & !FAST_TYPE()) # (PORT_CLKENA1 == PORT_USED)) & (PORT_CLKENA1 != PORT_UNUSED) GENERATE
		pll.clkena[1] = clkena[1];
	END GENERATE;
	IF ((USED(clkena0) & !FAST_TYPE()) # (PORT_CLKENA0 == PORT_USED)) & (PORT_CLKENA0 != PORT_UNUSED) GENERATE
		pll.clkena[0] = clkena[0];
	END GENERATE;
	IF ((USED(extclkena3) & !FAST_TYPE()) # (PORT_EXTCLKENA3 == PORT_USED)) & (PORT_EXTCLKENA3 != PORT_UNUSED) GENERATE
		pll.extclkena[3] = extclkena[3];
	END GENERATE;
	IF ((USED(extclkena2) & !FAST_TYPE()) # (PORT_EXTCLKENA2 == PORT_USED)) & (PORT_EXTCLKENA2 != PORT_UNUSED) GENERATE
		pll.extclkena[2] = extclkena[2];
	END GENERATE;
	IF ((USED(extclkena1) & !FAST_TYPE()) # (PORT_EXTCLKENA1 == PORT_USED)) & (PORT_EXTCLKENA1 != PORT_UNUSED) GENERATE
		pll.extclkena[1] = extclkena[1];
	END GENERATE;
	IF ((USED(extclkena0) & !FAST_TYPE()) # (PORT_EXTCLKENA0 == PORT_USED)) & (PORT_EXTCLKENA0 != PORT_UNUSED) GENERATE
		pll.extclkena[0] = extclkena[0];
	END GENERATE;
	IF USING_SCANCLK() & FAMILY_HAS_SCAN_PORTS() GENERATE
		pll.scanclk = scanclk;
	END GENERATE;
	IF PORT_SCANACLR == PORT_USED # (PORT_SCANACLR != PORT_UNUSED & (USED(scanaclr) & USED(scanclk) & FAMILY_HAS_SCAN_PORTS())) GENERATE
		pll.scanaclr = scanaclr;
	END GENERATE;
	IF PORT_SCANDATA == PORT_USED # (PORT_SCANDATA != PORT_UNUSED & (USED(scandata) & USED(scanclk) & FAMILY_HAS_SCAN_PORTS())) GENERATE
		pll.scandata = scandata;
	END GENERATE;
	IF PORT_SCANREAD == PORT_USED # (PORT_SCANREAD != PORT_UNUSED & (USED(scanread) & USED(scanclk) & FAMILY_HAS_SCAN_PORTS())) GENERATE
		pll.scanread = scanread;
	END GENERATE;
	IF PORT_SCANWRITE == PORT_USED # (PORT_SCANWRITE != PORT_UNUSED & (USED(scanwrite) & USED(scanclk) & FAMILY_HAS_SCAN_PORTS())) GENERATE
		pll.scanwrite = scanwrite;
	END GENERATE;

	-- rename the outputs before passing them out
	IF (WIDTH_CLOCK > 5) GENERATE
	IF ((USED(clk5) & PORT_CLK5 == DEFAULT_USAGE) # PORT_CLK5 == PORT_USED) & !CYCLONEII_MEMBER()  GENERATE
		_clk5 = pll.clk[5];
		clk[5] = _clk5;
	END GENERATE;
	END GENERATE;
	IF USING_CLK4() & !CYCLONEII_MEMBER() GENERATE
		_clk4 = pll.clk[4];
		clk[4] = _clk4;
	END GENERATE;
	IF USING_CLK3() & !CYCLONEII_MEMBER() GENERATE
		_clk3 = pll.clk[3];
		clk[3] = _clk3;
	END GENERATE;
	IF USING_CLK2() GENERATE
		_clk2 = pll.clk[2];
		clk[2] = _clk2;
	END GENERATE;
	IF USING_CLK1() GENERATE
		_clk1 = pll.clk[1];
		clk[1] = _clk1;
	END GENERATE;
	IF USING_CLK0() GENERATE
		_clk0 = pll.clk[0];
		clk[0] = _clk0;
	END GENERATE;
	IF ((PORT_EXTCLK3 == DEFAULT_USAGE) & USED(extclk3)) # (PORT_EXTCLK3 == PORT_USED) GENERATE
		_extclk3 = pll.extclk[3];
		extclk[3] = _extclk3;
	END GENERATE;
	IF ((PORT_EXTCLK2 == DEFAULT_USAGE) & USED(extclk2)) # (PORT_EXTCLK2 == PORT_USED) GENERATE
		_extclk2 = pll.extclk[2];
		extclk[2] = _extclk2;
	END GENERATE;
	IF ((PORT_EXTCLK1 == DEFAULT_USAGE) & USED(extclk1)) # (PORT_EXTCLK1 == PORT_USED) GENERATE
		_extclk1 = pll.extclk[1];
		extclk[1] = _extclk1;
	END GENERATE;
	IF ((PORT_EXTCLK0 == DEFAULT_USAGE) & USED(extclk0)) # (PORT_EXTCLK0 == PORT_USED) GENERATE
		_extclk0 = pll.extclk[0];
		extclk[0] = _extclk0;
	END GENERATE;
	IF ((PORT_CLKBAD1 == DEFAULT_USAGE) & USED(clkbad1)) # (PORT_CLKBAD1 == PORT_USED) GENERATE
		_clkbad1 = pll.clkbad[1];
		clkbad[1] = _clkbad1;
	END GENERATE;
	IF ((PORT_CLKBAD0 == DEFAULT_USAGE) & USED(clkbad0)) # (PORT_CLKBAD0 == PORT_USED) GENERATE
		_clkbad0 = pll.clkbad[0];
		clkbad[0] = _clkbad0;
	END GENERATE;
	IF ((PORT_ACTIVECLOCK == DEFAULT_USAGE) & USED(activeclock)) # (PORT_ACTIVECLOCK == PORT_USED) GENERATE
		_activeclock = pll.activeclock;
		activeclock = _activeclock;
	END GENERATE;
	IF USING_LOCKED() GENERATE
		IF INVERT_LOCKED_OUTPUT() GENERATE
			_locked = !pll.locked;
			locked = _locked;
		ELSE GENERATE
			_locked = pll.locked;
			locked = _locked;
		END GENERATE;
	END GENERATE;
	IF ((PORT_CLKLOSS == DEFAULT_USAGE) & USED(clkloss)) # (PORT_CLKLOSS == PORT_USED) GENERATE
		_clkloss = pll.clkloss;
		clkloss = _clkloss;
	END GENERATE;
	IF (USED(scandataout) & USING_SCANCLK() & FAMILY_HAS_SCAN_PORTS() & (PORT_SCANDATAOUT == DEFAULT_USAGE)) # (PORT_SCANDATAOUT == PORT_USED) GENERATE	
		_scandataout = pll.scandataout;
		scandataout = _scandataout;
	END GENERATE;
	IF (USED(scandone) & USING_SCANCLK() & FAMILY_HAS_SCAN_PORTS() & (PORT_SCANDONE == DEFAULT_USAGE)) # (PORT_SCANDONE == PORT_USED) GENERATE
		_scandone = pll.scandone;
		scandone = _scandone;
	END GENERATE;
	IF USED(enable0) GENERATE
		_enable0 = pll.enable0;
		enable0 = _enable0;
	END GENERATE;
	IF USED(enable1) GENERATE
		_enable1 = pll.enable1;
		enable1 = _enable1;
	END GENERATE;
	IF (SCLKOUT0_SUPPORTED() & USED(sclkout0) & (PORT_SCLKOUT0 == DEFAULT_USAGE)) # (PORT_SCLKOUT0 == PORT_USED) GENERATE
		_sclkout0 = pll.sclkout[0];
		sclkout0 = _sclkout0;
	END GENERATE;
	IF (SCLKOUT1_SUPPORTED() & USED(sclkout1) & (PORT_SCLKOUT1 == DEFAULT_USAGE)) # (PORT_SCLKOUT1 == PORT_USED) GENERATE
		_sclkout1 = pll.sclkout[1];
		sclkout1 = _sclkout1;
	END GENERATE;

	sclkout1 = GND & inclk[0] & fbin & pllena & clkswitch & areset & pfdena & clkena[0] & extclkena[0] & scanclk & scanaclr & scanread & scanwrite & scandata;
	ELSE GENERATE
		IF USING_CLK_OUTPUT() GENERATE
			FOR i IN WIDTH_CLOCK - 1 TO 0 GENERATE
				clk[i] = auto_generated.clk[i];
			END GENERATE;
		END GENERATE;
		IF USING_PHASECOUNTERSELECT() GENERATE
			FOR i IN WIDTH_PHASECOUNTERSELECT - 1 TO 0 GENERATE
				auto_generated.phasecounterselect[i] = phasecounterselect[i];
			END GENERATE;
		END GENERATE;
		IF USED(clkbad1) GENERATE
			clkbad[1] = auto_generated.clkbad[1];
		END GENERATE;
		IF USED(clkbad0) GENERATE
			clkbad[0] = auto_generated.clkbad[0];
		END GENERATE;
		IF USED(phasedone) GENERATE
			phasedone = auto_generated.phasedone;
		END GENERATE;
		IF USED(icdrclk) GENERATE
			icdrclk = auto_generated.icdrclk;
		END GENERATE;
		IF USED(fref) GENERATE
			fref = auto_generated.fref;
		END GENERATE;
		IF USED(scandataout) GENERATE
			scandataout = auto_generated.scandataout;
		END GENERATE;
		IF USED(scandone) GENERATE
			scandone = auto_generated.scandone;
		END GENERATE;
		IF USED(activeclock) GENERATE
			activeclock = auto_generated.activeclock;
		END GENERATE;
		IF USED(locked) GENERATE
			locked = auto_generated.locked;
		END GENERATE;
		IF USED(vcooverrange) GENERATE
			vcooverrange = auto_generated.vcooverrange;
		END GENERATE;
		IF USED(vcounderrange) GENERATE
			vcounderrange = auto_generated.vcounderrange;
		END GENERATE;
		IF USED(fbout) GENERATE
			fbout = auto_generated.fbout;
		END GENERATE;

		IF USED(phaseupdown) GENERATE
			auto_generated.phaseupdown = phaseupdown;
		END GENERATE;
		IF USED(phasestep) GENERATE
			auto_generated.phasestep = phasestep;
		END GENERATE;
		IF USED(scandata) GENERATE
			auto_generated.scandata = scandata;
		END GENERATE;
		IF USED(scanclk) GENERATE
			auto_generated.scanclk = scanclk;
		END GENERATE;
		IF USED(scanclkena) GENERATE
			auto_generated.scanclkena = scanclkena;
		END GENERATE;
		IF USED(configupdate) GENERATE
			auto_generated.configupdate = configupdate;
		END GENERATE;
		IF USED(clkswitch) GENERATE
			auto_generated.clkswitch = clkswitch;
		END GENERATE;
		IF USED(pfdena) GENERATE
			auto_generated.pfdena = pfdena;
		END GENERATE;
		IF USED(areset) GENERATE
			auto_generated.areset = areset;
		END GENERATE;
		IF USED(fbin) GENERATE
			auto_generated.fbin = fbin;
		END GENERATE;
		IF USED(inclk) GENERATE
			auto_generated.inclk[] = inclk[];
		END GENERATE;
		IF USED(clkloss) GENERATE
			auto_generated.clkloss = clkloss;
		END GENERATE;
		IF USING_FBMIMICBIDIR() GENERATE
			fbmimicbidir = auto_generated.fbmimicbidir;
		ELSE GENERATE
			fbmimicbidir = GND;
		END GENERATE;
	END GENERATE;
	clk[] = GND;
	IF !USING_FBMIMICBIDIR() & !USE_CLEARBOX() GENERATE
		fbmimicbidir = GND;
	END GENERATE;
	IF !USED(fref) GENERATE
		fref = GND;
	END GENERATE;
	IF !USED(activeclock) GENERATE
		activeclock = GND;
	END GENERATE;
	IF !USED(clkloss) GENERATE
		clkloss = GND;
	END GENERATE;
	IF !USED(fbout) GENERATE
		fbout = GND;
	END GENERATE;
	IF !USED(scandataout) GENERATE
		scandataout = GND;
	END GENERATE;
	IF !USED(sclkout1) GENERATE
		sclkout1 = GND;
	END GENERATE;
	IF !USED(enable1) GENERATE
		enable1 = GND;
	END GENERATE;
	IF !USED(locked) GENERATE
		locked = GND;
	END GENERATE;
	IF !USED(vcooverrange) GENERATE
		vcooverrange = GND;
	END GENERATE;
	IF !USED(sclkout0) GENERATE
		sclkout0 = GND;
	END GENERATE;
	IF !USED(icdrclk) GENERATE
		icdrclk = GND;
	END GENERATE;
	IF !USED(enable0) GENERATE
		enable0 = GND;
	END GENERATE;
	IF !USED(vcounderrange) GENERATE
		vcounderrange = GND;
	END GENERATE;
	IF !USED(clk) GENERATE
		clk[] = GND;
	END GENERATE;
	IF !USED(scandone) GENERATE
		scandone = GND;
	END GENERATE;
	IF !USED(extclk) GENERATE
		extclk[] = GND;
	END GENERATE;
	IF !USED(clkbad) GENERATE
		clkbad[] = GND;
	END GENERATE;
	IF !USED(phasedone) GENERATE
		phasedone = GND;
	END GENERATE;
END;
